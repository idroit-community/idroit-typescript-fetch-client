/**
 * iDroit Dashboard Admin API
 *      これは[株式会社フォアー](https://www.fore-co.ltd/ja/)が開発するを使ったDecentralizd Identifiers / Verifiable Credentials(DID/VC)に関係する機能を簡単に利用するための REST API です。現在以下のユースケースをサポートしています。これは今後も拡張されていきます。     - DIDの生成:      - グループ管理機能       - (企業/プロジェクトのまとまり)ごとにユーザー、クライアント、証明書(VC)スキーマを紐付けて管理する。          詳細は以下を参照してください。     - [idroit dashboard admin UI](https://admin.idroit-dashboard.com)     - [idroit dashboard公式ホームページ]()     - [idroit dashboard操作マニュアル]()      以下は関連リンクです。     - [Universal Resolver](https://dev.uniresolver.io/)     - [W3C DID Core 1.0](https://www.w3.org/TR/did-core/)     - [Verifiable Credentials Data Model v2.0](https://www.w3.org/TR/vc-data-model-2.0/)   
 *
 * OpenAPI spec version: 0.9.2
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as api from "./api"
import { Configuration } from "./configuration"

const config: Configuration = {}

describe("AuthApi", () => {
  let instance: api.AuthApi
  beforeEach(function() {
    instance = new api.AuthApi(config)
  });

  test("authControllerGetProfile", () => {
    return expect(instance.authControllerGetProfile({})).resolves.toBe(null)
  })
  test("authControllerLogin", () => {
    const body: api.SignInDto = undefined
    return expect(instance.authControllerLogin(body, {})).resolves.toBe(null)
  })
})

describe("BadgesApi", () => {
  let instance: api.BadgesApi
  beforeEach(function() {
    instance = new api.BadgesApi(config)
  });

  test("badgesControllerAddLabel", () => {
    const body: api.AddLabelToBadgeDto = undefined
    const id: string = "id_example"
    return expect(instance.badgesControllerAddLabel(body, id, {})).resolves.toBe(null)
  })
  test("badgesControllerCreate", () => {
    const body: api.CreateBadgeDto = undefined
    return expect(instance.badgesControllerCreate(body, {})).resolves.toBe(null)
  })
  test("badgesControllerDownload", () => {
    const id: string = "id_example"
    const vpInfoId: string = "vpInfoId_example"
    return expect(instance.badgesControllerDownload(id, vpInfoId, {})).resolves.toBe(null)
  })
  test("badgesControllerFileVerify", () => {
    const file: Blob = "file_example"
    return expect(instance.badgesControllerFileVerify(file, {})).resolves.toBe(null)
  })
  test("badgesControllerFindAll", () => {
    const page: number = 1.2
    const limit: number = 1.2
    const label: string = "label_example"
    const filename: string = "filename_example"
    const description: string = "description_example"
    const status: number = 1.2
    return expect(instance.badgesControllerFindAll(page, limit, label, filename, description, status, {})).resolves.toBe(null)
  })
  test("badgesControllerFindOne", () => {
    const id: string = "id_example"
    return expect(instance.badgesControllerFindOne(id, {})).resolves.toBe(null)
  })
  test("badgesControllerVerify", () => {
    const body: api.VerifyBadgeDto = undefined
    const id: string = "id_example"
    return expect(instance.badgesControllerVerify(body, id, {})).resolves.toBe(null)
  })
})

describe("DidInfosApi", () => {
  let instance: api.DidInfosApi
  beforeEach(function() {
    instance = new api.DidInfosApi(config)
  });

  test("didInfosControllerAddLabel", () => {
    const body: api.AddLabelToDidInfoDto = undefined
    const id: string = "id_example"
    return expect(instance.didInfosControllerAddLabel(body, id, {})).resolves.toBe(null)
  })
  test("didInfosControllerConnectUser", () => {
    const id: string = "id_example"
    const userId: string = "userId_example"
    return expect(instance.didInfosControllerConnectUser(id, userId, {})).resolves.toBe(null)
  })
  test("didInfosControllerCreate", () => {
    const body: api.CreateDidDto = undefined
    return expect(instance.didInfosControllerCreate(body, {})).resolves.toBe(null)
  })
  test("didInfosControllerDisconnectUser", () => {
    const id: string = "id_example"
    return expect(instance.didInfosControllerDisconnectUser(id, {})).resolves.toBe(null)
  })
  test("didInfosControllerFindAll", () => {
    const page: number = 1.2
    const limit: number = 1.2
    const did: string = "did_example"
    const manageUuid: string = "manageUuid_example"
    const label: string = "label_example"
    const method: string = "method_example"
    const existPrivateKey: boolean = true
    const description: string = "description_example"
    const domainName: string = "domainName_example"
    return expect(instance.didInfosControllerFindAll(page, limit, did, manageUuid, label, method, existPrivateKey, description, domainName, {})).resolves.toBe(null)
  })
  test("didInfosControllerFindOne", () => {
    const id: string = "id_example"
    return expect(instance.didInfosControllerFindOne(id, {})).resolves.toBe(null)
  })
  test("didInfosControllerRegister", () => {
    const body: api.RegisterDidDto = undefined
    return expect(instance.didInfosControllerRegister(body, {})).resolves.toBe(null)
  })
  test("didInfosControllerRemove", () => {
    const id: string = "id_example"
    return expect(instance.didInfosControllerRemove(id, {})).resolves.toBe(null)
  })
  test("didInfosControllerResolve", () => {
    const body: api.ResolveDidDto = undefined
    return expect(instance.didInfosControllerResolve(body, {})).resolves.toBe(null)
  })
})

describe("FilesApi", () => {
  let instance: api.FilesApi
  beforeEach(function() {
    instance = new api.FilesApi(config)
  });

  test("filesControllerDownload", () => {
    const id: string = "id_example"
    return expect(instance.filesControllerDownload(id, {})).resolves.toBe(null)
  })
  test("filesControllerExecuteCSV", () => {
    const body: api.CreateDidDto = undefined
    const id: string = "id_example"
    return expect(instance.filesControllerExecuteCSV(body, id, {})).resolves.toBe(null)
  })
  test("filesControllerFindAll", () => {
    const page: number = 1.2
    const limit: number = 1.2
    const filename: string = "filename_example"
    const originalname: string = "originalname_example"
    const executed: boolean = true
    const type: string = "type_example"
    const status: number = 1.2
    return expect(instance.filesControllerFindAll(page, limit, filename, originalname, executed, type, status, {})).resolves.toBe(null)
  })
  test("filesControllerFindOne", () => {
    const id: string = "id_example"
    return expect(instance.filesControllerFindOne(id, {})).resolves.toBe(null)
  })
  test("filesControllerRemove", () => {
    const id: string = "id_example"
    return expect(instance.filesControllerRemove(id, {})).resolves.toBe(null)
  })
  test("filesControllerUploadFile", () => {
    const file: Blob = "file_example"
    return expect(instance.filesControllerUploadFile(file, {})).resolves.toBe(null)
  })
})

describe("GroupsApi", () => {
  let instance: api.GroupsApi
  beforeEach(function() {
    instance = new api.GroupsApi(config)
  });

  test("groupsControllerConnectDidInfos", () => {
    const body: api.ConnectDidInfosDto = undefined
    const id: string = "id_example"
    return expect(instance.groupsControllerConnectDidInfos(body, id, {})).resolves.toBe(null)
  })
  test("groupsControllerConnectUsers", () => {
    const body: api.ConnectUsersDto = undefined
    const id: string = "id_example"
    return expect(instance.groupsControllerConnectUsers(body, id, {})).resolves.toBe(null)
  })
  test("groupsControllerConnectVcInfos", () => {
    const body: api.ConnectVcInfosDto = undefined
    const id: string = "id_example"
    return expect(instance.groupsControllerConnectVcInfos(body, id, {})).resolves.toBe(null)
  })
  test("groupsControllerConnectVcSchema", () => {
    const body: api.ConnectVcSchemasDto = undefined
    const id: string = "id_example"
    return expect(instance.groupsControllerConnectVcSchema(body, id, {})).resolves.toBe(null)
  })
  test("groupsControllerConnectVpInfos", () => {
    const body: api.ConnectVpInfosDto = undefined
    const id: string = "id_example"
    return expect(instance.groupsControllerConnectVpInfos(body, id, {})).resolves.toBe(null)
  })
  test("groupsControllerCreate", () => {
    const body: api.CreateGroupDto = undefined
    return expect(instance.groupsControllerCreate(body, {})).resolves.toBe(null)
  })
  test("groupsControllerDisconnectDidInfo", () => {
    const id: string = "id_example"
    const didInfoId: string = "didInfoId_example"
    return expect(instance.groupsControllerDisconnectDidInfo(id, didInfoId, {})).resolves.toBe(null)
  })
  test("groupsControllerDisconnectUser", () => {
    const id: string = "id_example"
    const userId: string = "userId_example"
    return expect(instance.groupsControllerDisconnectUser(id, userId, {})).resolves.toBe(null)
  })
  test("groupsControllerDisconnectVcInfo", () => {
    const id: string = "id_example"
    const vcInfoId: string = "vcInfoId_example"
    return expect(instance.groupsControllerDisconnectVcInfo(id, vcInfoId, {})).resolves.toBe(null)
  })
  test("groupsControllerDisconnectVcSchema", () => {
    const id: string = "id_example"
    const vcSchemaId: string = "vcSchemaId_example"
    return expect(instance.groupsControllerDisconnectVcSchema(id, vcSchemaId, {})).resolves.toBe(null)
  })
  test("groupsControllerDisconnectVpInfo", () => {
    const id: string = "id_example"
    const vpInfoId: string = "vpInfoId_example"
    return expect(instance.groupsControllerDisconnectVpInfo(id, vpInfoId, {})).resolves.toBe(null)
  })
  test("groupsControllerFindAll", () => {
    const page: number = 1.2
    const limit: number = 1.2
    const name: string = "name_example"
    const status: string = "status_example"
    return expect(instance.groupsControllerFindAll(page, limit, name, status, {})).resolves.toBe(null)
  })
  test("groupsControllerFindOne", () => {
    const id: string = "id_example"
    return expect(instance.groupsControllerFindOne(id, {})).resolves.toBe(null)
  })
  test("groupsControllerRemove", () => {
    const id: string = "id_example"
    return expect(instance.groupsControllerRemove(id, {})).resolves.toBe(null)
  })
  test("groupsControllerUpdate", () => {
    const id: string = "id_example"
    return expect(instance.groupsControllerUpdate(id, {})).resolves.toBe(null)
  })
})

describe("HealthApi", () => {
  let instance: api.HealthApi
  beforeEach(function() {
    instance = new api.HealthApi(config)
  });

  test("appControllerHealth", () => {
    return expect(instance.appControllerHealth({})).resolves.toBe(null)
  })
})

describe("MailsApi", () => {
  let instance: api.MailsApi
  beforeEach(function() {
    instance = new api.MailsApi(config)
  });

  test("mailsControllerFindAll", () => {
    const page: number = 1.2
    const limit: number = 1.2
    return expect(instance.mailsControllerFindAll(page, limit, {})).resolves.toBe(null)
  })
  test("mailsControllerFindOne", () => {
    const id: string = "id_example"
    return expect(instance.mailsControllerFindOne(id, {})).resolves.toBe(null)
  })
  test("mailsControllerSend", () => {
    const body: api.SendMailDto = undefined
    return expect(instance.mailsControllerSend(body, {})).resolves.toBe(null)
  })
  test("mailsControllerSendBatch", () => {
    const body: api.SendMailBatchDto = undefined
    return expect(instance.mailsControllerSendBatch(body, {})).resolves.toBe(null)
  })
})

describe("SettingsApi", () => {
  let instance: api.SettingsApi
  beforeEach(function() {
    instance = new api.SettingsApi(config)
  });

  test("settingsControllerFindAll", () => {
    return expect(instance.settingsControllerFindAll({})).resolves.toBe(null)
  })
  test("settingsControllerFindOne", () => {
    const key: string = "key_example"
    return expect(instance.settingsControllerFindOne(key, {})).resolves.toBe(null)
  })
})

describe("UsersApi", () => {
  let instance: api.UsersApi
  beforeEach(function() {
    instance = new api.UsersApi(config)
  });

  test("usersControllerCreate", () => {
    const body: api.CreateUserDto = undefined
    return expect(instance.usersControllerCreate(body, {})).resolves.toBe(null)
  })
  test("usersControllerExportKey", () => {
    const id: string = "id_example"
    const keyId: string = "keyId_example"
    return expect(instance.usersControllerExportKey(id, keyId, {})).resolves.toBe(null)
  })
  test("usersControllerFindAll", () => {
    const page: number = 1.2
    const limit: number = 1.2
    const name: string = "name_example"
    const email: string = "email_example"
    const status: string = "status_example"
    const role: string = "role_example"
    const needActivateFlow: boolean = true
    return expect(instance.usersControllerFindAll(page, limit, name, email, status, role, needActivateFlow, {})).resolves.toBe(null)
  })
  test("usersControllerFindOne", () => {
    const id: string = "id_example"
    return expect(instance.usersControllerFindOne(id, {})).resolves.toBe(null)
  })
  test("usersControllerInvite", () => {
    const id: string = "id_example"
    return expect(instance.usersControllerInvite(id, {})).resolves.toBe(null)
  })
  test("usersControllerRegisterUserDid", () => {
    const body: api.GenerateDidDto = undefined
    const id: string = "id_example"
    return expect(instance.usersControllerRegisterUserDid(body, id, {})).resolves.toBe(null)
  })
  test("usersControllerRegistration", () => {
    const body: api.RegistrationProcessDto = undefined
    const token: string = "token_example"
    return expect(instance.usersControllerRegistration(body, token, {})).resolves.toBe(null)
  })
  test("usersControllerRemove", () => {
    const id: string = "id_example"
    return expect(instance.usersControllerRemove(id, {})).resolves.toBe(null)
  })
  test("usersControllerSendDid", () => {
    const id: string = "id_example"
    const didInfoId: string = "didInfoId_example"
    return expect(instance.usersControllerSendDid(id, didInfoId, {})).resolves.toBe(null)
  })
  test("usersControllerSendKey", () => {
    const id: string = "id_example"
    const didInfoId: string = "didInfoId_example"
    return expect(instance.usersControllerSendKey(id, didInfoId, {})).resolves.toBe(null)
  })
  test("usersControllerSendVc", () => {
    const id: string = "id_example"
    const vcInfoId: string = "vcInfoId_example"
    return expect(instance.usersControllerSendVc(id, vcInfoId, {})).resolves.toBe(null)
  })
  test("usersControllerUpdate", () => {
    const body: api.CreateUserDto = undefined
    const id: string = "id_example"
    return expect(instance.usersControllerUpdate(body, id, {})).resolves.toBe(null)
  })
})

describe("VcInfosApi", () => {
  let instance: api.VcInfosApi
  beforeEach(function() {
    instance = new api.VcInfosApi(config)
  });

  test("vcInfosControllerAddLabel", () => {
    const body: api.AddLabelToVcInfoDto = undefined
    const id: string = "id_example"
    return expect(instance.vcInfosControllerAddLabel(body, id, {})).resolves.toBe(null)
  })
  test("vcInfosControllerConnectUser", () => {
    const body: api.UpdateVcInfoDto = undefined
    const id: string = "id_example"
    return expect(instance.vcInfosControllerConnectUser(body, id, {})).resolves.toBe(null)
  })
  test("vcInfosControllerCreate", () => {
    const body: api.CreateVcInfoDto = undefined
    return expect(instance.vcInfosControllerCreate(body, {})).resolves.toBe(null)
  })
  test("vcInfosControllerDisconnectUser", () => {
    const id: string = "id_example"
    return expect(instance.vcInfosControllerDisconnectUser(id, {})).resolves.toBe(null)
  })
  test("vcInfosControllerFindAll", () => {
    const page: number = 1.2
    const limit: number = 1.2
    const label: string = "label_example"
    const description: string = "description_example"
    return expect(instance.vcInfosControllerFindAll(page, limit, label, description, {})).resolves.toBe(null)
  })
  test("vcInfosControllerFindOne", () => {
    const id: string = "id_example"
    return expect(instance.vcInfosControllerFindOne(id, {})).resolves.toBe(null)
  })
  test("vcInfosControllerGenerateVp", () => {
    const body: api.GenerateVpDto = undefined
    const id: string = "id_example"
    return expect(instance.vcInfosControllerGenerateVp(body, id, {})).resolves.toBe(null)
  })
  test("vcInfosControllerIssue", () => {
    const body: api.IssueVcInfoDto = undefined
    return expect(instance.vcInfosControllerIssue(body, {})).resolves.toBe(null)
  })
  test("vcInfosControllerUpload", () => {
    const credentialObject: api.any = undefined
    const label: string = "label_example"
    const description: string = "description_example"
    return expect(instance.vcInfosControllerUpload(credentialObject, label, description, {})).resolves.toBe(null)
  })
})

describe("VcSchemasApi", () => {
  let instance: api.VcSchemasApi
  beforeEach(function() {
    instance = new api.VcSchemasApi(config)
  });

  test("vcSchemasControllerCreate", () => {
    const body: api.CreateVcSchemaDto = undefined
    return expect(instance.vcSchemasControllerCreate(body, {})).resolves.toBe(null)
  })
  test("vcSchemasControllerFindAll", () => {
    const page: number = 1.2
    const limit: number = 1.2
    const title: string = "title_example"
    const version: string = "version_example"
    const description: string = "description_example"
    const isBadgeSchema: boolean = true
    return expect(instance.vcSchemasControllerFindAll(page, limit, title, version, description, isBadgeSchema, {})).resolves.toBe(null)
  })
  test("vcSchemasControllerFindOne", () => {
    const id: string = "id_example"
    return expect(instance.vcSchemasControllerFindOne(id, {})).resolves.toBe(null)
  })
  test("vcSchemasControllerUpdate", () => {
    const body: api.UpdateVcSchemaDto = undefined
    const id: string = "id_example"
    return expect(instance.vcSchemasControllerUpdate(body, id, {})).resolves.toBe(null)
  })
})

describe("VerificationsApi", () => {
  let instance: api.VerificationsApi
  beforeEach(function() {
    instance = new api.VerificationsApi(config)
  });

  test("verificationsControllerCreate", () => {
    const body: api.VerificationDto = undefined
    return expect(instance.verificationsControllerCreate(body, {})).resolves.toBe(null)
  })
  test("verificationsControllerFindAll", () => {
    const page: number = 1.2
    const limit: number = 1.2
    const label: string = "label_example"
    const result: boolean = true
    return expect(instance.verificationsControllerFindAll(page, limit, label, result, {})).resolves.toBe(null)
  })
  test("verificationsControllerFindOne", () => {
    const id: string = "id_example"
    return expect(instance.verificationsControllerFindOne(id, {})).resolves.toBe(null)
  })
})

describe("VpInfosApi", () => {
  let instance: api.VpInfosApi
  beforeEach(function() {
    instance = new api.VpInfosApi(config)
  });

  test("vpInfosControllerAddLabel", () => {
    const body: api.AddLabelToVpInfoDto = undefined
    const id: string = "id_example"
    return expect(instance.vpInfosControllerAddLabel(body, id, {})).resolves.toBe(null)
  })
  test("vpInfosControllerConnectUser", () => {
    const body: api.UpdateVcInfoDto = undefined
    const id: string = "id_example"
    return expect(instance.vpInfosControllerConnectUser(body, id, {})).resolves.toBe(null)
  })
  test("vpInfosControllerCreate", () => {
    const body: api.CreateVpInfoDto = undefined
    return expect(instance.vpInfosControllerCreate(body, {})).resolves.toBe(null)
  })
  test("vpInfosControllerDisconnectUser", () => {
    const id: string = "id_example"
    return expect(instance.vpInfosControllerDisconnectUser(id, {})).resolves.toBe(null)
  })
  test("vpInfosControllerFindAll", () => {
    const page: number = 1.2
    const limit: number = 1.2
    const label: string = "label_example"
    const description: string = "description_example"
    return expect(instance.vpInfosControllerFindAll(page, limit, label, description, {})).resolves.toBe(null)
  })
  test("vpInfosControllerFindOne", () => {
    const id: string = "id_example"
    return expect(instance.vpInfosControllerFindOne(id, {})).resolves.toBe(null)
  })
  test("vpInfosControllerUpload", () => {
    const credentialObject: api.any = undefined
    const label: string = "label_example"
    const description: string = "description_example"
    return expect(instance.vpInfosControllerUpload(credentialObject, label, description, {})).resolves.toBe(null)
  })
})

