/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * iDroit Dashboard Admin API
 *      これは[株式会社フォアー](https://www.fore-co.ltd/ja/)が開発するを使ったDecentralizd Identifiers / Verifiable Credentials(DID/VC)に関係する機能を簡単に利用するための REST API です。現在以下のユースケースをサポートしています。これは今後も拡張されていきます。     - DIDの生成:      - グループ管理機能       - (企業/プロジェクトのまとまり)ごとにユーザー、クライアント、証明書(VC)スキーマを紐付けて管理する。          詳細は以下を参照してください。     - [idroit dashboard admin UI](https://admin.idroit-dashboard.com)     - [idroit dashboard公式ホームページ]()     - [idroit dashboard操作マニュアル]()      以下は関連リンクです。     - [Universal Resolver](https://dev.uniresolver.io/)     - [W3C DID Core 1.0](https://www.w3.org/TR/did-core/)     - [Verifiable Credentials Data Model v2.0](https://www.w3.org/TR/vc-data-model-2.0/)   
 *
 * OpenAPI spec version: 0.9.2
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as url from "url";
import * as isomorphicFetch from "isomorphic-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "/".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = isomorphicFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
}

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name = "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface AddLabelToBadgeDto
 */
export interface AddLabelToBadgeDto {
    /**
     * (必須) Badgeの識別や整理などの管理するにあったてメタデータとして任意で設定可能な単語のフレーズ。(例: badge-for-project1)
     * @type {string}
     * @memberof AddLabelToBadgeDto
     */
    label: string;
}
/**
 * 
 * @export
 * @interface AddLabelToDidInfoDto
 */
export interface AddLabelToDidInfoDto {
    /**
     * (必須) DIDの識別や整理などの管理するにあったてメタデータとして任意で設定可能な単語のフレーズ。(例: did-for-project1)
     * @type {string}
     * @memberof AddLabelToDidInfoDto
     */
    label: string;
}
/**
 * 
 * @export
 * @interface AddLabelToVcInfoDto
 */
export interface AddLabelToVcInfoDto {
    /**
     * (必須) VCの識別や整理などの管理するにあったてメタデータとして任意で設定可能な単語のフレーズ。(例: vc-for-project1)
     * @type {string}
     * @memberof AddLabelToVcInfoDto
     */
    label: string;
}
/**
 * 
 * @export
 * @interface AddLabelToVpInfoDto
 */
export interface AddLabelToVpInfoDto {
    /**
     * (必須) VPの識別や整理などの管理するにあったてメタデータとして任意で設定可能な単語のフレーズ。(例: vp-for-project1)
     * @type {string}
     * @memberof AddLabelToVpInfoDto
     */
    label: string;
}
/**
 * 
 * @export
 * @interface Badge
 */
export interface Badge {
    /**
     * (必須) バッジの識別子
     * @type {string}
     * @memberof Badge
     */
    id: string;
    /**
     * (任意) バッジのラベル名
     * @type {string}
     * @memberof Badge
     */
    label?: string;
    /**
     * (任意) バッジのファイル名
     * @type {string}
     * @memberof Badge
     */
    filename?: string;
    /**
     * (任意) バッジの作成目的や用途など任意で設定可能な説明文
     * @type {string}
     * @memberof Badge
     */
    description: string;
    /**
     * (必須) バッジの状態(1: アクティブ, 0: 停止中)
     * @type {number}
     * @memberof Badge
     */
    status: number;
    /**
     * (任意) バッジに紐付いたVCスキーマ
     * @type {VcSchema}
     * @memberof Badge
     */
    vcSchema?: VcSchema;
    /**
     * (任意) バッジに紐付き、メタデータとなるVC情報
     * @type {VcInfo}
     * @memberof Badge
     */
    vcInfo?: VcInfo;
    /**
     * (必須) グループの作成日時
     * @type {string}
     * @memberof Badge
     */
    createdAt: string;
    /**
     * (必須) グループの最終更新日時
     * @type {string}
     * @memberof Badge
     */
    updatedAt: string;
}
/**
 * 
 * @export
 * @interface BadgeResponseDto
 */
export interface BadgeResponseDto {
    /**
     * バッジの識別子
     * @type {string}
     * @memberof BadgeResponseDto
     */
    id: string;
    /**
     * バッジのラベル名
     * @type {string}
     * @memberof BadgeResponseDto
     */
    label: string;
    /**
     * バッジのファイル名
     * @type {string}
     * @memberof BadgeResponseDto
     */
    filename: string;
    /**
     * バッジの作成目的や用途など任意で設定可能な説明文
     * @type {string}
     * @memberof BadgeResponseDto
     */
    description: string;
    /**
     * バッジの状態(1: 利用可, 0: 利用停止中)
     * @type {number}
     * @memberof BadgeResponseDto
     */
    status: number;
    /**
     * バッジに紐付いたVCスキーマの配列
     * @type {VcSchema}
     * @memberof BadgeResponseDto
     */
    vcSchema: VcSchema;
    /**
     * バッジに紐付いたVC情報の配列
     * @type {VcInfo}
     * @memberof BadgeResponseDto
     */
    vcInfo: VcInfo;
    /**
     * バッジの作成日時
     * @type {string}
     * @memberof BadgeResponseDto
     */
    createdAt: string;
    /**
     * バッジの最終更新日時
     * @type {string}
     * @memberof BadgeResponseDto
     */
    updatedAt: string;
}
/**
 * 
 * @export
 * @interface BadgesFileBody
 */
export interface BadgesFileBody {
    /**
     * 
     * @type {Blob}
     * @memberof BadgesFileBody
     */
    file?: Blob;
}
/**
 * 
 * @export
 * @interface BadgesResponseDto
 */
export interface BadgesResponseDto {
    /**
     * Array of badge items
     * @type {Array<BadgeResponseDto>}
     * @memberof BadgesResponseDto
     */
    items: Array<BadgeResponseDto>;
    /**
     * 
     * @type {MetaDto}
     * @memberof BadgesResponseDto
     */
    meta: MetaDto;
    /**
     * 
     * @type {LinkDto}
     * @memberof BadgesResponseDto
     */
    links: LinkDto;
}
/**
 * 
 * @export
 * @interface ConnectDidInfosDto
 */
export interface ConnectDidInfosDto {
    /**
     * (必須) グループに紐付けを行うDID情報の識別子の配列
     * @type {Array<string>}
     * @memberof ConnectDidInfosDto
     */
    didInfoIds: Array<string>;
}
/**
 * 
 * @export
 * @interface ConnectUsersDto
 */
export interface ConnectUsersDto {
    /**
     * (必須) グループに紐付けを行うユーザーアカウント識別子の配列
     * @type {Array<string>}
     * @memberof ConnectUsersDto
     */
    userIds: Array<string>;
}
/**
 * 
 * @export
 * @interface ConnectVcInfosDto
 */
export interface ConnectVcInfosDto {
    /**
     * (必須) グループに紐付けを行うVC情報の識別子の配列
     * @type {Array<string>}
     * @memberof ConnectVcInfosDto
     */
    vcInfoIds: Array<string>;
}
/**
 * 
 * @export
 * @interface ConnectVcSchemasDto
 */
export interface ConnectVcSchemasDto {
    /**
     * (必須) グループに紐付けを行うVCスキーマ識別子の配列
     * @type {Array<string>}
     * @memberof ConnectVcSchemasDto
     */
    vcSchemaIds: Array<string>;
}
/**
 * 
 * @export
 * @interface ConnectVpInfosDto
 */
export interface ConnectVpInfosDto {
    /**
     * (必須) グループに紐付けを行うVP情報の識別子の配列
     * @type {Array<string>}
     * @memberof ConnectVpInfosDto
     */
    vpInfoIds: Array<string>;
}
/**
 * 
 * @export
 * @interface CreateBadgeDto
 */
export interface CreateBadgeDto {
    /**
     * (任意) バッジのタイトル
     * @type {string}
     * @memberof CreateBadgeDto
     */
    label?: string;
    /**
     * (任意) グループの作成目的や用途など任意で設定可能な説明文
     * @type {string}
     * @memberof CreateBadgeDto
     */
    description?: string;
    /**
     * (必須) VCの発行者の識別子として用いる文字列の値。現在はDIDのみがサポートされていますが、今後のアップデートでDID以外の文字列をサポートする予定です。
     * @type {string}
     * @memberof CreateBadgeDto
     */
    issuer: string;
    /**
     * (必須) VCの主張内容(クレーム)となる値のオブジェクト型の値
     * @type {any}
     * @memberof CreateBadgeDto
     */
    credentialSubject: any;
    /**
     * (必須) 新規発行するVCの元となるVCスキーマの識別子
     * @type {string}
     * @memberof CreateBadgeDto
     */
    vcSchemaId: string;
}
/**
 * 
 * @export
 * @interface CreateDidDto
 */
export interface CreateDidDto {
    /**
     * (必須) 新規生成するDIDのメソッド。(現在対応するDIDメソッド: \"key\", \"ether\", \"ethr:sepolia\", \"ethr:arbitrum:goerli\", \"web\")
     * @type {string}
     * @memberof CreateDidDto
     */
    didMethod: string;
    /**
     * (任意) DIDの識別や整理などの管理するにあったてメタデータとして任意で設定可能な単語のフレーズ。(例: did-for-project1)
     * @type {string}
     * @memberof CreateDidDto
     */
    label?: string;
    /**
     * (任意) did:webメソッドでDIDを生成する際に必要なドメイン名。DIDによって指定されたドメインがドメインネームシステム(DNS)を通じて解決されるときのホスト名。did:webメソッド以外では必要のないパラメータなため任意の項目である。
     * @type {string}
     * @memberof CreateDidDto
     */
    domainName?: string;
    /**
     * (任意) DIDの生成目的や用途など任意で設定可能な説明文。
     * @type {string}
     * @memberof CreateDidDto
     */
    description?: string;
}
/**
 * 
 * @export
 * @interface CreateGroupDto
 */
export interface CreateGroupDto {
    /**
     * (必須) グループの名前。(例: プロジェクト名や企業名など)
     * @type {string}
     * @memberof CreateGroupDto
     */
    name: string;
    /**
     * (任意) グループの作成目的や用途など任意で設定可能な説明文
     * @type {string}
     * @memberof CreateGroupDto
     */
    description?: string;
}
/**
 * 
 * @export
 * @interface CreateUserDto
 */
export interface CreateUserDto {
    /**
     * (必須) ユーザーアカウントの名前
     * @type {string}
     * @memberof CreateUserDto
     */
    name: string;
    /**
     * (必須) ユーザーアカウントのメールアドレス
     * @type {string}
     * @memberof CreateUserDto
     */
    email: string;
    /**
     * (任意) ユーザーアカウントのパスワード(8文字以上20字未満)。\"needActivateFlow\"が\"false\"の場合は必須。
     * @type {string}
     * @memberof CreateUserDto
     */
    password?: string;
    /**
     * (必須) アカウントのタイプ
     * @type {string}
     * @memberof CreateUserDto
     */
    role: string;
    /**
     * (任意) アカウントの有効化フローが必要か否か。デフォルト値ではfalse。(true: 必要 /false: 不要)
     * @type {boolean}
     * @memberof CreateUserDto
     */
    needActivateFlow?: boolean;
    /**
     * (任意) ユーザーアカウントに紐付けるグループのIDの配列
     * @type {Array<string>}
     * @memberof CreateUserDto
     */
    groupIds?: Array<string>;
}
/**
 * 
 * @export
 * @interface CreateVcInfoDto
 */
export interface CreateVcInfoDto {
    /**
     * (必須) VCの発行者の識別子として用いる文字列の値。現在はDIDのみがサポートされていますが、今後のアップデートでDID以外の文字列をサポートする予定です。
     * @type {string}
     * @memberof CreateVcInfoDto
     */
    issuer: string;
    /**
     * (必須) 新規発行するVCの元となるVCスキーマの識別子
     * @type {string}
     * @memberof CreateVcInfoDto
     */
    vcSchemaId: string;
    /**
     * (必須) VCの主張内容(クレーム)となる値のオブジェクト型の値
     * @type {any}
     * @memberof CreateVcInfoDto
     */
    credentialSubject: any;
    /**
     * (任意) VCの識別や整理などの管理するにあったてメタデータとして任意で設定可能な単語のフレーズ。(例: vc-for-project1)
     * @type {string}
     * @memberof CreateVcInfoDto
     */
    label?: string;
    /**
     * (任意) VCの発行目的や用途など任意で設定可能な説明文
     * @type {string}
     * @memberof CreateVcInfoDto
     */
    description?: string;
}
/**
 * 
 * @export
 * @interface CreateVcSchemaDto
 */
export interface CreateVcSchemaDto {
    /**
     * (必須) 新規生成するVCスキーマのタイトル
     * @type {string}
     * @memberof CreateVcSchemaDto
     */
    title: string;
    /**
     * (必須) VCスキーマのバージョン(デフォルト: 1.0.0)
     * @type {string}
     * @memberof CreateVcSchemaDto
     */
    version: string;
    /**
     * (任意) VCスキーマに設定する@context文字列の配列
     * @type {Array<string>}
     * @memberof CreateVcSchemaDto
     */
    contexts?: Array<string>;
    /**
     * (任意) VCスキーマの説明文
     * @type {string}
     * @memberof CreateVcSchemaDto
     */
    description?: string;
    /**
     * (任意) このスキーマがバッジのスキーマか否か(デフォルト: false)
     * @type {boolean}
     * @memberof CreateVcSchemaDto
     */
    isBadgeSchema: boolean;
    /**
     * (任意) バッジの画像のファイル識別子。'`isBadgeSchema`プロパティが`true`であり、バッジスキーマとして利用する場合は必須のパラメータ。
     * @type {string}
     * @memberof CreateVcSchemaDto
     */
    fileId: string;
    /**
     * (必須) VCのスキーマの各項目における項目名と項目型のオブジェクトの配列
     * @type {Array<VcSchemaProperty>}
     * @memberof CreateVcSchemaDto
     */
    propArray: Array<VcSchemaProperty>;
}
/**
 * 
 * @export
 * @interface CreateVpInfoDto
 */
export interface CreateVpInfoDto {
    /**
     * (必須) VPを生成する元となるVC情報の識別子の配列
     * @type {Array<string>}
     * @memberof CreateVpInfoDto
     */
    vcInfoIds: Array<string>;
    /**
     * (必須) VP生成時の署名に用いるDID情報の識別子
     * @type {string}
     * @memberof CreateVpInfoDto
     */
    didInfoId: string;
    /**
     * (任意) VPの識別や整理などの管理するにあったてメタデータとして任意で設定可能な単語のフレーズ。(例: vc-for-project1)
     * @type {string}
     * @memberof CreateVpInfoDto
     */
    label?: string;
    /**
     * (任意) VPの生成目的や用途などを任意で設定可能な説明文
     * @type {string}
     * @memberof CreateVpInfoDto
     */
    description?: string;
}
/**
 * 
 * @export
 * @interface DidInfo
 */
export interface DidInfo {
    /**
     * (必須) DID情報の識別子
     * @type {string}
     * @memberof DidInfo
     */
    id: string;
    /**
     * (必須) DID情報の管理に用いるユニークな識別子
     * @type {string}
     * @memberof DidInfo
     */
    manageUuid: string;
    /**
     * (必須) DID
     * @type {string}
     * @memberof DidInfo
     */
    did: string;
    /**
     * (必須) DIDメソッド
     * @type {string}
     * @memberof DidInfo
     */
    method: DidInfo.MethodEnum;
    /**
     * (任意) DIDの識別や整理などの管理するにあったてメタデータとして任意で設定可能な単語のフレーズ。(例: did-for-project1)
     * @type {string}
     * @memberof DidInfo
     */
    label: string;
    /**
     * (任意) did:webメソッドでDIDを生成する際に必要なドメイン名。DIDによって指定されたドメインがドメインネームシステム(DNS)を通じて解決されるときのホスト名。did:webメソッド以外では必要のないカラムである。
     * @type {string}
     * @memberof DidInfo
     */
    domainName: string;
    /**
     * (必須) DID情報に紐付いた秘密鍵を本アプリケーションで保管しているか否か
     * @type {boolean}
     * @memberof DidInfo
     */
    existPrivateKey: boolean;
    /**
     * (任意) DID情報の生成目的や用途など任意で設定可能な説明文
     * @type {string}
     * @memberof DidInfo
     */
    description: string;
    /**
     * (任意) DID情報に紐付いたアカウントの配列
     * @type {User}
     * @memberof DidInfo
     */
    user?: User;
    /**
     * (任意) DIDを生成したユーザーアカウント
     * @type {User}
     * @memberof DidInfo
     */
    createdBy: User;
    /**
     * (任意) 生成時に署名にDIDを用いたVP情報
     * @type {VpInfo}
     * @memberof DidInfo
     */
    vpInfos?: VpInfo;
    /**
     * (任意) DID情報に紐づいたグループの配列
     * @type {Array<Group>}
     * @memberof DidInfo
     */
    groups?: Array<Group>;
    /**
     * (必須) DID情報の作成日時
     * @type {string}
     * @memberof DidInfo
     */
    createdAt: string;
    /**
     * (必須) DID情報の最終更新
     * @type {string}
     * @memberof DidInfo
     */
    updatedAt: string;
}

/**
 * @export
 * @namespace DidInfo
 */
export namespace DidInfo {
    /**
     * @export
     * @enum {string}
     */
    export enum MethodEnum {
        Key = <any> 'key',
        Web = <any> 'web',
        Ethr = <any> 'ethr',
        Ethrarbitrumgoerli = <any> 'ethr:arbitrum:goerli',
        Ethrsepolia = <any> 'ethr:sepolia'
    }
}
/**
 * 
 * @export
 * @interface DidInfoResponseDto
 */
export interface DidInfoResponseDto {
    /**
     * 
     * @type {DidInfo}
     * @memberof DidInfoResponseDto
     */
    didInfo: DidInfo;
    /**
     * 
     * @type {any}
     * @memberof DidInfoResponseDto
     */
    didObject: any;
}
/**
 * 
 * @export
 * @interface DidInfosResponseDto
 */
export interface DidInfosResponseDto {
    /**
     * Array of DID info items
     * @type {Array<DidInfo>}
     * @memberof DidInfosResponseDto
     */
    items: Array<DidInfo>;
    /**
     * 
     * @type {MetaDto}
     * @memberof DidInfosResponseDto
     */
    meta: MetaDto;
    /**
     * 
     * @type {LinkDto}
     * @memberof DidInfosResponseDto
     */
    links: LinkDto;
}
/**
 * 
 * @export
 * @interface FileResponseDto
 */
export interface FileResponseDto {
    /**
     * (必須) ファイルの識別子
     * @type {string}
     * @memberof FileResponseDto
     */
    id: string;
    /**
     * (必須) システム内で管理される際にシステムによって名付けられるユニークなファイル名
     * @type {string}
     * @memberof FileResponseDto
     */
    filename: string;
    /**
     * (必須) システム内で管理される際にシステムによって名付けられるユニークなファイル名
     * @type {string}
     * @memberof FileResponseDto
     */
    originalname: string;
    /**
     * (必須) システムへアップロード時の元のファイル名
     * @type {string}
     * @memberof FileResponseDto
     */
    fileData: string;
    /**
     * (必須) ファイル形式
     * @type {string}
     * @memberof FileResponseDto
     */
    fileType: string;
    /**
     * (必須) ファイル形式
     * @type {string}
     * @memberof FileResponseDto
     */
    type: string;
    /**
     * (任意) ファイルがCSVの場合、アカウントデータ生成実行に使用されたか。(true: 実行済み, false: 未使用)
     * @type {boolean}
     * @memberof FileResponseDto
     */
    executed: boolean;
    /**
     * (必須) ファイルのステータス
     * @type {number}
     * @memberof FileResponseDto
     */
    status: number;
    /**
     * ファイルをアップロードしたユーザーアカウント
     * @type {User}
     * @memberof FileResponseDto
     */
    createdBy: User;
    /**
     * (必須) ファイルの作成日時
     * @type {string}
     * @memberof FileResponseDto
     */
    createdAt: string;
    /**
     * (必須) グループの最終更新日時
     * @type {string}
     * @memberof FileResponseDto
     */
    updatedAt: string;
}
/**
 * 
 * @export
 * @interface FilesResponseDto
 */
export interface FilesResponseDto {
    /**
     * Array of file items
     * @type {Array<any>}
     * @memberof FilesResponseDto
     */
    items: Array<any>;
    /**
     * 
     * @type {MetaDto}
     * @memberof FilesResponseDto
     */
    meta: MetaDto;
    /**
     * 
     * @type {LinkDto}
     * @memberof FilesResponseDto
     */
    links: LinkDto;
}
/**
 * 
 * @export
 * @interface GenerateDidDto
 */
export interface GenerateDidDto {
    /**
     * (必須) 新規生成するDIDのメソッド。(現在対応するDIDメソッド: \"key\", \"ether\", \"ethr:sepolia\", \"ethr:arbitrum:goerli\", \"web\")
     * @type {Array<string>}
     * @memberof GenerateDidDto
     */
    didMethod: Array<GenerateDidDto.DidMethodEnum>;
    /**
     * (任意) DIDの識別や整理などの管理するにあったてメタデータとして任意で設定可能な単語のフレーズ。(例: did-for-project1)
     * @type {string}
     * @memberof GenerateDidDto
     */
    label?: string;
    /**
     * (任意) did:webメソッドでDIDを生成する際に必要なドメイン名。DIDによって指定されたドメインがドメインネームシステム(DNS)を通じて解決されるときのホスト名。did:webメソッド以外では必要のないパラメータなため任意の項目である。
     * @type {string}
     * @memberof GenerateDidDto
     */
    domainName?: string;
    /**
     * (任意) DIDの生成目的や用途など任意で設定可能な説明文。
     * @type {string}
     * @memberof GenerateDidDto
     */
    description?: string;
}

/**
 * @export
 * @namespace GenerateDidDto
 */
export namespace GenerateDidDto {
    /**
     * @export
     * @enum {string}
     */
    export enum DidMethodEnum {
        Key = <any> 'key',
        Web = <any> 'web',
        Ethrsepolia = <any> 'ethr:sepolia',
        Ethr = <any> 'ethr',
        Ethrarbitrumgoerli = <any> 'ethr:arbitrum:goerli'
    }
}
/**
 * 
 * @export
 * @interface GenerateVpDto
 */
export interface GenerateVpDto {
    /**
     * (必須) VPを生成する際にVCに対しての署名に用いるDIDの識別子
     * @type {string}
     * @memberof GenerateVpDto
     */
    didInfoId: string;
}
/**
 * 
 * @export
 * @interface GetProfileResponseDto
 */
export interface GetProfileResponseDto {
    /**
     * アカウントの識別子
     * @type {string}
     * @memberof GetProfileResponseDto
     */
    userId: string;
    /**
     * アカウントの名前
     * @type {string}
     * @memberof GetProfileResponseDto
     */
    name: string;
    /**
     * アカウントのメールアドレス
     * @type {string}
     * @memberof GetProfileResponseDto
     */
    email: string;
    /**
     * アカウントロール(\"admin\", \"user\", \"client\")
     * @type {string}
     * @memberof GetProfileResponseDto
     */
    role: GetProfileResponseDto.RoleEnum;
    /**
     * JWTが発行された日時
     * @type {number}
     * @memberof GetProfileResponseDto
     */
    iat: number;
    /**
     * JWTが失効する日時
     * @type {number}
     * @memberof GetProfileResponseDto
     */
    exp: number;
}

/**
 * @export
 * @namespace GetProfileResponseDto
 */
export namespace GetProfileResponseDto {
    /**
     * @export
     * @enum {string}
     */
    export enum RoleEnum {
        Admin = <any> 'admin',
        User = <any> 'user',
        Client = <any> 'client'
    }
}
/**
 * 
 * @export
 * @interface Group
 */
export interface Group {
    /**
     * (必須) グループの識別子
     * @type {string}
     * @memberof Group
     */
    id: string;
    /**
     * (必須) グループの名前。(例: プロジェクト名や企業名など)
     * @type {string}
     * @memberof Group
     */
    name: string;
    /**
     * (必須) グループの状態(1: アクティブ, 0: 停止中)
     * @type {string}
     * @memberof Group
     */
    status: Group.StatusEnum;
    /**
     * (任意) グループの作成目的や用途など任意で設定可能な説明文
     * @type {string}
     * @memberof Group
     */
    description: string;
    /**
     * (任意) グループに紐付いたアカウントの配列
     * @type {Array<User>}
     * @memberof Group
     */
    users?: Array<User>;
    /**
     * (必須) グループを作成したユーザーアカウント。
     * @type {User}
     * @memberof Group
     */
    createdBy: User;
    /**
     * (任意) グループに紐付いたDID情報の配列
     * @type {Array<DidInfo>}
     * @memberof Group
     */
    didInfos?: Array<DidInfo>;
    /**
     * (任意) グループに紐付いたVC情報の配列
     * @type {Array<VcInfo>}
     * @memberof Group
     */
    vcInfos?: Array<VcInfo>;
    /**
     * (任意) グループに紐付いたVP情報の配列
     * @type {Array<VpInfo>}
     * @memberof Group
     */
    vpInfos?: Array<VpInfo>;
    /**
     * (任意) グループに紐付いたVCスキーマの配列
     * @type {Array<VcSchema>}
     * @memberof Group
     */
    vcSchemas?: Array<VcSchema>;
    /**
     * (必須) グループの作成日時
     * @type {string}
     * @memberof Group
     */
    createdAt: string;
    /**
     * (必須) グループの最終更新日時
     * @type {string}
     * @memberof Group
     */
    updatedAt: string;
}

/**
 * @export
 * @namespace Group
 */
export namespace Group {
    /**
     * @export
     * @enum {string}
     */
    export enum StatusEnum {
        Active = <any> 'active',
        Deactive = <any> 'deactive'
    }
}
/**
 * 
 * @export
 * @interface GroupResponseDto
 */
export interface GroupResponseDto {
    /**
     * グループの識別子
     * @type {string}
     * @memberof GroupResponseDto
     */
    id: string;
    /**
     *  グループの名前
     * @type {string}
     * @memberof GroupResponseDto
     */
    name: string;
    /**
     * グループの状態(1: アクティブ, 0: 停止中)
     * @type {string}
     * @memberof GroupResponseDto
     */
    status: GroupResponseDto.StatusEnum;
    /**
     * グループの作成目的や用途など任意で設定可能な説明文
     * @type {string}
     * @memberof GroupResponseDto
     */
    description: string;
    /**
     * グループに紐付いたユーザーアカウントの配列
     * @type {Array<User>}
     * @memberof GroupResponseDto
     */
    users: Array<User>;
    /**
     * グループを作成したユーザーアカウント
     * @type {User}
     * @memberof GroupResponseDto
     */
    createdBy: User;
    /**
     * グループに紐付いたVC情報の配列
     * @type {Array<DidInfo>}
     * @memberof GroupResponseDto
     */
    didInfos: Array<DidInfo>;
    /**
     * グループに紐付いたVC情報の配列
     * @type {Array<VcInfo>}
     * @memberof GroupResponseDto
     */
    vcInfos: Array<VcInfo>;
    /**
     * グループに紐付いたVP情報の配列
     * @type {Array<VpInfo>}
     * @memberof GroupResponseDto
     */
    vpInfos: Array<VpInfo>;
    /**
     * グループに紐付いたVCスキーマの配列
     * @type {Array<VcSchema>}
     * @memberof GroupResponseDto
     */
    vcSchemas: Array<VcSchema>;
    /**
     * グループの作成日時
     * @type {string}
     * @memberof GroupResponseDto
     */
    createdAt: string;
    /**
     * グループの最終更新日時
     * @type {string}
     * @memberof GroupResponseDto
     */
    updatedAt: string;
}

/**
 * @export
 * @namespace GroupResponseDto
 */
export namespace GroupResponseDto {
    /**
     * @export
     * @enum {string}
     */
    export enum StatusEnum {
        Active = <any> 'active',
        Deactive = <any> 'deactive'
    }
}
/**
 * 
 * @export
 * @interface GroupsResponseDto
 */
export interface GroupsResponseDto {
    /**
     * Array of group items
     * @type {Array<GroupResponseDto>}
     * @memberof GroupsResponseDto
     */
    items: Array<GroupResponseDto>;
    /**
     * 
     * @type {MetaDto}
     * @memberof GroupsResponseDto
     */
    meta: MetaDto;
    /**
     * 
     * @type {LinkDto}
     * @memberof GroupsResponseDto
     */
    links: LinkDto;
}
/**
 * 
 * @export
 * @interface IssueVcInfoDto
 */
export interface IssueVcInfoDto {
    /**
     * (必須) VCの発行者の識別子として用いる文字列の値。現在はDIDのみがサポートされていますが、今後のアップデートでDID以外の文字列をサポートする予定です。
     * @type {string}
     * @memberof IssueVcInfoDto
     */
    issuer: string;
    /**
     * (必須) VCの主張内容(クレーム)となる値のオブジェクト型の値
     * @type {any}
     * @memberof IssueVcInfoDto
     */
    credentialSubject: any;
    /**
     * (任意) VCの識別や整理などの管理するにあったてメタデータとして任意で設定可能な単語のフレーズ。(例: vc-for-project1)
     * @type {string}
     * @memberof IssueVcInfoDto
     */
    label?: string;
    /**
     * (任意) VCの発行目的や用途など任意で設定可能な説明文
     * @type {string}
     * @memberof IssueVcInfoDto
     */
    description?: string;
}
/**
 * 
 * @export
 * @interface LinkDto
 */
export interface LinkDto {
    /**
     * URL for the first page
     * @type {string}
     * @memberof LinkDto
     */
    first: string;
    /**
     * URL for the previous page
     * @type {any}
     * @memberof LinkDto
     */
    previous: any;
    /**
     * URL for the next page
     * @type {string}
     * @memberof LinkDto
     */
    next: string;
    /**
     * URL for the last page
     * @type {string}
     * @memberof LinkDto
     */
    last: string;
}
/**
 * 
 * @export
 * @interface Mail
 */
export interface Mail {
    /**
     * (必須) 送信済みメールの識別子
     * @type {string}
     * @memberof Mail
     */
    id: string;
    /**
     * (必須) 送信済みメールの件名
     * @type {string}
     * @memberof Mail
     */
    title: string;
    /**
     * (必須) 送信済みメールの内容
     * @type {string}
     * @memberof Mail
     */
    content: string;
    /**
     * (必須) 全てのuser権限アカウントに対して送信するか。(true: 全てのuser権限アカウントに送信, false: 全てのuser権限アカウントに送信しない)
     * @type {boolean}
     * @memberof Mail
     */
    forEveryUser: boolean;
    /**
     * (必須) 全てのclient権限アカウントに対して送信するか。(true: 全てのclient権限アカウントに送信, false: 全てのclient権限アカウントに送信しない)
     * @type {boolean}
     * @memberof Mail
     */
    forEveryClient: boolean;
    /**
     * (任意) メールの送信先となるユーザーアカウントの配列
     * @type {Array<User>}
     * @memberof Mail
     */
    users?: Array<User>;
    /**
     * (任意) メールの送信先となるグループの配列
     * @type {Array<Group>}
     * @memberof Mail
     */
    groups?: Array<Group>;
    /**
     * (必須) メール送信操作を行ったAdmin権限アカウント
     * @type {Array<User>}
     * @memberof Mail
     */
    createdBy?: Array<User>;
    /**
     * (必須) メールの送信日時
     * @type {string}
     * @memberof Mail
     */
    createdAt: string;
    /**
     * (必須) メールの送信日時
     * @type {string}
     * @memberof Mail
     */
    updatedAt: string;
}
/**
 * 
 * @export
 * @interface MailsResponseDto
 */
export interface MailsResponseDto {
    /**
     * 
     * @type {Array<Mail>}
     * @memberof MailsResponseDto
     */
    items: Array<Mail>;
    /**
     * 
     * @type {MetaDto}
     * @memberof MailsResponseDto
     */
    meta: MetaDto;
    /**
     * 
     * @type {LinkDto}
     * @memberof MailsResponseDto
     */
    links: LinkDto;
}
/**
 * 
 * @export
 * @interface MetaDto
 */
export interface MetaDto {
    /**
     * Total number of items
     * @type {number}
     * @memberof MetaDto
     */
    totalItems: number;
    /**
     * Number of items on the current page
     * @type {number}
     * @memberof MetaDto
     */
    itemCount: number;
    /**
     * Number of items per page
     * @type {number}
     * @memberof MetaDto
     */
    itemsPerPage: number;
    /**
     * Total number of pages
     * @type {number}
     * @memberof MetaDto
     */
    totalPages: number;
    /**
     * Current page number
     * @type {number}
     * @memberof MetaDto
     */
    currentPage: number;
}
/**
 * 
 * @export
 * @interface ModelFile
 */
export interface ModelFile {
    /**
     * (必須) ファイルの識別子
     * @type {string}
     * @memberof ModelFile
     */
    id: string;
    /**
     * (任意) システム内で管理される際にシステムによって名付けられるユニークなファイル名
     * @type {string}
     * @memberof ModelFile
     */
    filename: string;
    /**
     * (必須) システムへアップロード時の元のファイル名
     * @type {string}
     * @memberof ModelFile
     */
    originalname: string;
    /**
     * (必須) ファイル形式
     * @type {string}
     * @memberof ModelFile
     */
    type: string;
    /**
     * (必須) ファイルのバイナリデータ
     * @type {string}
     * @memberof ModelFile
     */
    fileData: string;
    /**
     * (任意) ファイルがCSVの場合、アカウントデータ生成実行に使用されたか。(true: 実行済み, false: 未使用)
     * @type {boolean}
     * @memberof ModelFile
     */
    executed: boolean;
    /**
     * (必須) ファイルのステータス
     * @type {number}
     * @memberof ModelFile
     */
    status: number;
    /**
     * (任意) ファイルを紐づけたグループの配列
     * @type {Array<Group>}
     * @memberof ModelFile
     */
    group: Array<Group>;
    /**
     * (任意) ファイルに紐づいたVCスキーマ
     * @type {VcSchema}
     * @memberof ModelFile
     */
    vcSchema?: VcSchema;
    /**
     * (必須) ファイルをアップロードしたユーザーアカウント。
     * @type {User}
     * @memberof ModelFile
     */
    createdBy: User;
    /**
     * (必須) ファイルの作成日時
     * @type {string}
     * @memberof ModelFile
     */
    createdAt: string;
    /**
     * (必須) グループの最終更新日時
     * @type {string}
     * @memberof ModelFile
     */
    updatedAt: string;
}
/**
 * 
 * @export
 * @interface RegisterDidDto
 */
export interface RegisterDidDto {
    /**
     * (必須) 
     * @type {string}
     * @memberof RegisterDidDto
     */
    did: string;
    /**
     * (任意) DIDの識別や整理などの管理するにあったてメタデータとして任意で設定可能な単語のフレーズ。(例: did-for-project1)
     * @type {string}
     * @memberof RegisterDidDto
     */
    label?: string;
    /**
     * (任意) DIDの生成目的や用途など任意で設定可能な説明文。
     * @type {string}
     * @memberof RegisterDidDto
     */
    description?: string;
}
/**
 * 
 * @export
 * @interface RegistrationProcessDto
 */
export interface RegistrationProcessDto {
    /**
     * The password of the user
     * @type {string}
     * @memberof RegistrationProcessDto
     */
    password: string;
}
/**
 * 
 * @export
 * @interface ResolveDidDto
 */
export interface ResolveDidDto {
    /**
     * (必須) 解決を実施するDID文字列。
     * @type {string}
     * @memberof ResolveDidDto
     */
    did: string;
}
/**
 * 
 * @export
 * @interface ResolveDidResponseDto
 */
export interface ResolveDidResponseDto {
    /**
     * 
     * @type {Array<string>}
     * @memberof ResolveDidResponseDto
     */
    context: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ResolveDidResponseDto
     */
    id: string;
    /**
     * 
     * @type {Array<any>}
     * @memberof ResolveDidResponseDto
     */
    verificationMethod: Array<any>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ResolveDidResponseDto
     */
    assertionMethod: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ResolveDidResponseDto
     */
    authentication: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ResolveDidResponseDto
     */
    capabilityInvocation: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ResolveDidResponseDto
     */
    capabilityDelegation: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ResolveDidResponseDto
     */
    keyAgreement: Array<string>;
}
/**
 * 
 * @export
 * @interface SendMailBatchDto
 */
export interface SendMailBatchDto {
    /**
     * (必須) メールの件名
     * @type {string}
     * @memberof SendMailBatchDto
     */
    title: string;
    /**
     * (必須) 全てのクライアントアカウントに対して送信するか (true: 全てのクライアントアカウントに送信, false: 全てのクライアントアカウントに送信しない)
     * @type {boolean}
     * @memberof SendMailBatchDto
     */
    forEveryClient: boolean;
    /**
     * (必須) 全てのユーザーアカウントに対して送信するか (true: 全てのユーザーアカウントに送信, false: 全てのユーザーアカウントに送信しない)
     * @type {boolean}
     * @memberof SendMailBatchDto
     */
    forEveryUser: boolean;
    /**
     * (任意) メールの送信対象のユーザーアカウント識別子の配列
     * @type {Array<string>}
     * @memberof SendMailBatchDto
     */
    userIds?: Array<string>;
    /**
     * (任意) 送信対象のグループ識別子の配列。グループを指定した場合グループに紐付くユーザーアカウントとクライアントアカウント全てにメールが送信される
     * @type {Array<string>}
     * @memberof SendMailBatchDto
     */
    groupIds?: Array<string>;
    /**
     * (必須) メールの内容
     * @type {string}
     * @memberof SendMailBatchDto
     */
    content: string;
}
/**
 * 
 * @export
 * @interface SendMailDto
 */
export interface SendMailDto {
    /**
     * (必須) メールの件名
     * @type {string}
     * @memberof SendMailDto
     */
    title: string;
    /**
     * (必須) メールの内容
     * @type {string}
     * @memberof SendMailDto
     */
    content: string;
    /**
     * (任意) メールの送信対象のユーザーアカウント識別子
     * @type {string}
     * @memberof SendMailDto
     */
    userId?: string;
}
/**
 * 
 * @export
 * @interface Setting
 */
export interface Setting {
}
/**
 * 
 * @export
 * @interface SettingListResponseDto
 */
export interface SettingListResponseDto {
    /**
     * 
     * @type {Array<Setting>}
     * @memberof SettingListResponseDto
     */
    settings: Array<Setting>;
}
/**
 * 
 * @export
 * @interface SettingResponseDto
 */
export interface SettingResponseDto {
    /**
     * The ID of the user
     * @type {string}
     * @memberof SettingResponseDto
     */
    id: string;
    /**
     * setting key name
     * @type {string}
     * @memberof SettingResponseDto
     */
    key: string;
    /**
     * setting value name
     * @type {string}
     * @memberof SettingResponseDto
     */
    value: string;
    /**
     * string, number or boolean
     * @type {string}
     * @memberof SettingResponseDto
     */
    type: string;
}
/**
 * 
 * @export
 * @interface SignInDto
 */
export interface SignInDto {
    /**
     * (必須) アカウントログインに用いるメールアドレス。
     * @type {string}
     * @memberof SignInDto
     */
    email: string;
    /**
     * (必須) アカウントログインに用いるパスワード
     * @type {string}
     * @memberof SignInDto
     */
    password: string;
}
/**
 * 
 * @export
 * @interface SignInResponseDto
 */
export interface SignInResponseDto {
    /**
     * 認証用のJSON Web Token
     * @type {string}
     * @memberof SignInResponseDto
     */
    accessToken: string;
}
/**
 * 
 * @export
 * @interface UpdateVcInfoDto
 */
export interface UpdateVcInfoDto {
    /**
     * (必須) VC情報を紐づけるアカウントの識別子
     * @type {string}
     * @memberof UpdateVcInfoDto
     */
    userId: string;
}
/**
 * 
 * @export
 * @interface UpdateVcSchemaDto
 */
export interface UpdateVcSchemaDto {
    /**
     * (必須) VCスキーマを紐づけるグループ識別子の配列。
     * @type {Array<string>}
     * @memberof UpdateVcSchemaDto
     */
    groupIds?: Array<string>;
    /**
     * (必須) VCスキーマを紐づけるcontext項目の配列。
     * @type {Array<string>}
     * @memberof UpdateVcSchemaDto
     */
    contexts?: Array<string>;
}
/**
 * 
 * @export
 * @interface UploadVCDto
 */
export interface UploadVCDto {
    /**
     * (任意) JSON形式のVCオブジェクト。ファイルアップロードではなくテキストを用いて作成する場合のみ必須
     * @type {any}
     * @memberof UploadVCDto
     */
    credentialObject?: any;
    /**
     * (任意) VCの識別や整理などの管理するにあったてメタデータとして任意で設定可能な単語のフレーズ。(例: vc-for-project1)
     * @type {string}
     * @memberof UploadVCDto
     */
    label?: string;
    /**
     * (任意) VCの発行目的や用途など任意で設定可能な説明文。
     * @type {string}
     * @memberof UploadVCDto
     */
    description?: string;
}
/**
 * 
 * @export
 * @interface UploadVPDto
 */
export interface UploadVPDto {
    /**
     * (任意) JSON形式のVPオブジェクト。ファイルアップロードではなくテキストを用いて作成する場合のみ必須
     * @type {any}
     * @memberof UploadVPDto
     */
    credentialObject?: any;
    /**
     * (任意) VPの識別や整理などの管理するにあったてメタデータとして任意で設定可能な単語のフレーズ。(例: vc-for-project1)
     * @type {string}
     * @memberof UploadVPDto
     */
    label?: string;
    /**
     * (任意) VPの発行目的や用途など任意で設定可能な説明文。
     * @type {string}
     * @memberof UploadVPDto
     */
    description?: string;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * アカウントの識別子
     * @type {string}
     * @memberof User
     */
    id: string;
    /**
     * アカウントの名前
     * @type {string}
     * @memberof User
     */
    name: string;
    /**
     * アカウントのメールアドレス
     * @type {string}
     * @memberof User
     */
    email: string;
    /**
     * アカウントのパスワード(8文字以上20字未満)
     * @type {string}
     * @memberof User
     */
    password: string;
    /**
     * (必須: {default: false}) アカウントの有効化フローが必要か否か(true: 必要 /false: 不要)
     * @type {boolean}
     * @memberof User
     */
    needActivateFlow: boolean;
    /**
     * ユーザーのアカウントステータス
     * @type {string}
     * @memberof User
     */
    status: User.StatusEnum;
    /**
     * アカウントのロール(admin/user/clinet)
     * @type {string}
     * @memberof User
     */
    role: User.RoleEnum;
    /**
     * (任意) このアカウントを作成したユーザー
     * @type {User}
     * @memberof User
     */
    createdBy?: User;
    /**
     * (任意) アカウントに紐付けされたDID情報の配列
     * @type {Array<DidInfo>}
     * @memberof User
     */
    didInfos?: Array<DidInfo>;
    /**
     * (任意) アカウントに紐付けされたVC情報の配列
     * @type {Array<VcInfo>}
     * @memberof User
     */
    vcInfos?: Array<VcInfo>;
    /**
     * (任意) アカウントに紐付けされたVP情報の配列
     * @type {Array<VpInfo>}
     * @memberof User
     */
    vpInfos?: Array<VpInfo>;
    /**
     * (任意) アカウントに紐付けされたグループの配列
     * @type {Array<Group>}
     * @memberof User
     */
    groups?: Array<Group>;
    /**
     * (任意) ユーザーアカウントがアップロードしたファイルの配列。
     * @type {Array<UserToken>}
     * @memberof User
     */
    userTokens: Array<UserToken>;
    /**
     * (任意) このユーザーによって作成されたアカウントの配列
     * @type {Array<User>}
     * @memberof User
     */
    createdUsers?: Array<User>;
    /**
     * (任意) アカウントに紐付けされたVC情報の配列
     * @type {Array<VcInfo>}
     * @memberof User
     */
    createdVcInfos?: Array<VcInfo>;
    /**
     * (任意) アカウントに紐付けされたVP情報の配列
     * @type {Array<VpInfo>}
     * @memberof User
     */
    createdVpInfos?: Array<VpInfo>;
    /**
     * (任意) アカウントに作成したグループの配列
     * @type {Array<Group>}
     * @memberof User
     */
    createdGroups?: Array<Group>;
    /**
     * (任意) アカウントが作成したDID情報の配列
     * @type {Array<DidInfo>}
     * @memberof User
     */
    createdDidInfos?: Array<DidInfo>;
    /**
     * (任意) ユーザーアカウントが作成したVCスキーマの配列。
     * @type {Array<VcSchema>}
     * @memberof User
     */
    createdVcSchemas: Array<VcSchema>;
    /**
     * (任意) ユーザーアカウントが実行した検証結果の配列。
     * @type {Array<Verification>}
     * @memberof User
     */
    createdVerifications: Array<Verification>;
    /**
     * (任意) Admin権限アカウントが送信したメールの配列(Adminロール以外の場合、関係のないカラム)
     * @type {Array<Mail>}
     * @memberof User
     */
    createdMails?: Array<Mail>;
    /**
     * (任意) ユーザーアカウントがアップロードしたファイルの配列。
     * @type {Array<any>}
     * @memberof User
     */
    createdFiles: Array<any>;
    /**
     * ユーザーアカウントの作成日時
     * @type {string}
     * @memberof User
     */
    createdAt: string;
    /**
     * ユーザーアカウントの更新日時
     * @type {string}
     * @memberof User
     */
    updatedAt: string;
}

/**
 * @export
 * @namespace User
 */
export namespace User {
    /**
     * @export
     * @enum {string}
     */
    export enum StatusEnum {
        Inactive = <any> 'inactive',
        Activating = <any> 'activating',
        Active = <any> 'active',
        Deactive = <any> 'deactive'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum RoleEnum {
        Admin = <any> 'admin',
        User = <any> 'user',
        Client = <any> 'client'
    }
}
/**
 * 
 * @export
 * @interface UserResponseDto
 */
export interface UserResponseDto {
    /**
     * ユーザーアカウントの識別子
     * @type {string}
     * @memberof UserResponseDto
     */
    id: string;
    /**
     * ユーザーアカウントの名前
     * @type {string}
     * @memberof UserResponseDto
     */
    name: string;
    /**
     * ユーザーアカウントのメールアドレス
     * @type {string}
     * @memberof UserResponseDto
     */
    email: string;
    /**
     * ユーザーアクティベーション(true: アクティブ /false: 停止中)
     * @type {boolean}
     * @memberof UserResponseDto
     */
    needActivateFlow: boolean;
    /**
     * ユーザーのアカウントステータス(\"inactive\": アクティブ未完了, \"acrivating\": アクティブ作業途中, \"active\": アクティブ中, \"deactive\": 論理削除済)
     * @type {string}
     * @memberof UserResponseDto
     */
    status: UserResponseDto.StatusEnum;
    /**
     * ユーザーのアカウントロール(\"admin\", \"user\", \"client\")
     * @type {string}
     * @memberof UserResponseDto
     */
    role: UserResponseDto.RoleEnum;
    /**
     * (任意) ユーザーアカウントがアップロードしたファイルの配列。
     * @type {Array<UserToken>}
     * @memberof UserResponseDto
     */
    userTokens: Array<UserToken>;
    /**
     * ユーザーアカウントを作成したユーザーアカウント
     * @type {User}
     * @memberof UserResponseDto
     */
    createdBy: User;
    /**
     * ユーザーアカウントに紐付けられたDID情報の配列
     * @type {Array<DidInfo>}
     * @memberof UserResponseDto
     */
    didInfos?: Array<DidInfo>;
    /**
     * ユーザーアカウントに紐付けられたVC情報の配列
     * @type {Array<VcInfo>}
     * @memberof UserResponseDto
     */
    vcInfos?: Array<VcInfo>;
    /**
     * ユーザーアカウントに紐付けられたVP情報の配列
     * @type {Array<VpInfo>}
     * @memberof UserResponseDto
     */
    vpInfos?: Array<VpInfo>;
    /**
     * ユーザーアカウントが作成したグループの配列
     * @type {Array<Group>}
     * @memberof UserResponseDto
     */
    groups?: Array<Group>;
    /**
     * ユーザーアカウントに紐付けされたVP情報の配列
     * @type {Array<User>}
     * @memberof UserResponseDto
     */
    createdUsers?: Array<User>;
    /**
     * ユーザーが作成したVC情報の配列
     * @type {Array<VcInfo>}
     * @memberof UserResponseDto
     */
    createdVcInfos?: Array<VcInfo>;
    /**
     * ユーザーが作成したVP情報の配列
     * @type {Array<VpInfo>}
     * @memberof UserResponseDto
     */
    createdVpInfos?: Array<VpInfo>;
    /**
     * ユーザーアカウントが作成したグループの配列
     * @type {Array<Group>}
     * @memberof UserResponseDto
     */
    createdGroups?: Array<Group>;
    /**
     * ユーザーが作成したDID情報の配列
     * @type {Array<DidInfo>}
     * @memberof UserResponseDto
     */
    createdDidInfos?: Array<DidInfo>;
    /**
     * ユーザーが作成したVCスキーマの配列
     * @type {Array<VcSchema>}
     * @memberof UserResponseDto
     */
    createdVcSchemas?: Array<VcSchema>;
    /**
     * ユーザーアカウントが実行した検証結果の配列
     * @type {Array<Verification>}
     * @memberof UserResponseDto
     */
    createdVerifications?: Array<Verification>;
    /**
     * Admin権限アカウントが送信したメールの配列
     * @type {Array<Mail>}
     * @memberof UserResponseDto
     */
    createdMails?: Array<Mail>;
    /**
     * ユーザーアカウントに紐付けされたファイルの配列
     * @type {Array<any>}
     * @memberof UserResponseDto
     */
    createdFiles?: Array<any>;
    /**
     * ユーザーアカウントの作成日時
     * @type {string}
     * @memberof UserResponseDto
     */
    createdAt: string;
    /**
     * ユーザーアカウントの更新日時
     * @type {string}
     * @memberof UserResponseDto
     */
    updatedAt: string;
}

/**
 * @export
 * @namespace UserResponseDto
 */
export namespace UserResponseDto {
    /**
     * @export
     * @enum {string}
     */
    export enum StatusEnum {
        Inactive = <any> 'inactive',
        Activating = <any> 'activating',
        Active = <any> 'active',
        Deactive = <any> 'deactive'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum RoleEnum {
        Admin = <any> 'admin',
        User = <any> 'user',
        Client = <any> 'client'
    }
}
/**
 * 
 * @export
 * @interface UserToken
 */
export interface UserToken {
}
/**
 * 
 * @export
 * @interface UsersResponseDto
 */
export interface UsersResponseDto {
    /**
     * Array of user items
     * @type {Array<UserResponseDto>}
     * @memberof UsersResponseDto
     */
    items: Array<UserResponseDto>;
    /**
     * 
     * @type {MetaDto}
     * @memberof UsersResponseDto
     */
    meta: MetaDto;
    /**
     * 
     * @type {LinkDto}
     * @memberof UsersResponseDto
     */
    links: LinkDto;
}
/**
 * 
 * @export
 * @interface V1FilesBody
 */
export interface V1FilesBody {
    /**
     * 
     * @type {Blob}
     * @memberof V1FilesBody
     */
    file?: Blob;
}
/**
 * 
 * @export
 * @interface VcContext
 */
export interface VcContext {
    /**
     * (必須) VCスキーマの識別子
     * @type {string}
     * @memberof VcContext
     */
    id: string;
    /**
     * (必須) VCスキーマのタイトル
     * @type {string}
     * @memberof VcContext
     */
    context: string;
    /**
     * (任意) contextが紐づくVCスキーマ
     * @type {VcSchema}
     * @memberof VcContext
     */
    vcSchema: VcSchema;
    /**
     * (必須) VCスキーマの作成日時
     * @type {string}
     * @memberof VcContext
     */
    createdAt: string;
    /**
     * (必須) VCスキーマの更新日時
     * @type {string}
     * @memberof VcContext
     */
    updatedAt: string;
}
/**
 * 
 * @export
 * @interface VcInfo
 */
export interface VcInfo {
    /**
     * (必須) VC情報の識別子
     * @type {string}
     * @memberof VcInfo
     */
    id: string;
    /**
     * (任意) VCの識別や整理などの管理するにあったてメタデータとして任意で設定可能な単語のフレーズ。(例: vc-for-project1)
     * @type {string}
     * @memberof VcInfo
     */
    label: string;
    /**
     * (必須) VCのハッシュ値。VCの保管における識別子として用いる。
     * @type {string}
     * @memberof VcInfo
     */
    hash: string;
    /**
     * (任意) VCの発行目的や用途など任意で設定可能な説明文。
     * @type {string}
     * @memberof VcInfo
     */
    description: string;
    /**
     * (任意) VC情報を生成したユーザーアカウント
     * @type {User}
     * @memberof VcInfo
     */
    createdBy: User;
    /**
     * (任意) 発行したVCの元となるVCスキーマ
     * @type {VcSchema}
     * @memberof VcInfo
     */
    vcSchema?: VcSchema;
    /**
     * (任意) VC情報と紐付いたアカウント
     * @type {User}
     * @memberof VcInfo
     */
    user?: User;
    /**
     * (任意) このVCを元に生成したVP情報の配列
     * @type {Array<VpInfo>}
     * @memberof VcInfo
     */
    vpInfos?: Array<VpInfo>;
    /**
     * (任意) VC情報に紐づいたグループの配列
     * @type {Array<Group>}
     * @memberof VcInfo
     */
    groups?: Array<Group>;
    /**
     * (任意) VC情報と紐付いたバッジ
     * @type {Badge}
     * @memberof VcInfo
     */
    badge?: Badge;
    /**
     * (任意) このVCの検証結果の配列。
     * @type {Array<Verification>}
     * @memberof VcInfo
     */
    verifications?: Array<Verification>;
    /**
     * (必須) VC情報の作成日時
     * @type {string}
     * @memberof VcInfo
     */
    createdAt: string;
    /**
     * (必須) VC情報の更新日時
     * @type {string}
     * @memberof VcInfo
     */
    updatedAt: string;
}
/**
 * 
 * @export
 * @interface VcInfoResponseDto
 */
export interface VcInfoResponseDto {
    /**
     * 本アプリケーションにおけるVCの管理情報
     * @type {VcInfo}
     * @memberof VcInfoResponseDto
     */
    vcInfo: VcInfo;
    /**
     * VCのJSONデータ
     * @type {any}
     * @memberof VcInfoResponseDto
     */
    vcObject: any;
}
/**
 * 
 * @export
 * @interface VcInfosResponseDto
 */
export interface VcInfosResponseDto {
    /**
     * Array of VC info items
     * @type {Array<VcInfo>}
     * @memberof VcInfosResponseDto
     */
    items: Array<VcInfo>;
    /**
     * 
     * @type {MetaDto}
     * @memberof VcInfosResponseDto
     */
    meta: MetaDto;
    /**
     * 
     * @type {LinkDto}
     * @memberof VcInfosResponseDto
     */
    links: LinkDto;
}
/**
 * 
 * @export
 * @interface VcSchema
 */
export interface VcSchema {
    /**
     * (必須) VCスキーマの識別子
     * @type {string}
     * @memberof VcSchema
     */
    id: string;
    /**
     * (必須) VCスキーマのタイトル
     * @type {string}
     * @memberof VcSchema
     */
    title: string;
    /**
     * (必須) VCスキーマのバージョン
     * @type {string}
     * @memberof VcSchema
     */
    version: string;
    /**
     * (任意) VCスキーマの説明文
     * @type {string}
     * @memberof VcSchema
     */
    description: string;
    /**
     * (必須) VCスキーマがバッジのスキーマか否か
     * @type {string}
     * @memberof VcSchema
     */
    isBadgeSchema?: string;
    /**
     * (任意) このVCスキーマを用いて生成したVC情報の配列。
     * @type {Array<VcInfo>}
     * @memberof VcSchema
     */
    vcInfos?: Array<VcInfo>;
    /**
     * (任意) VCスキーマに設定したcontext項目の配列
     * @type {Array<VcContext>}
     * @memberof VcSchema
     */
    vcContexts?: Array<VcContext>;
    /**
     * (必須) VCスキーマの項目情報の配列
     * @type {Array<VcSchemaProperty>}
     * @memberof VcSchema
     */
    vcSchemaProperties?: Array<VcSchemaProperty>;
    /**
     * (任意) VCスキーマを紐付けたグループの配列
     * @type {Array<Group>}
     * @memberof VcSchema
     */
    groups?: Array<Group>;
    /**
     * (任意) VCスキーマを紐付けたバッジ
     * @type {Array<Badge>}
     * @memberof VcSchema
     */
    badges?: Array<Badge>;
    /**
     * (任意) VCスキーマに紐付けるバッジ用の画像。`isBadgeSchema`プロパティが`true`の場合必須。
     * @type {any}
     * @memberof VcSchema
     */
    file?: any;
    /**
     * (必須) VCスキーマを作成したユーザーアカウント。
     * @type {User}
     * @memberof VcSchema
     */
    createdBy: User;
    /**
     * (必須) VCスキーマの作成日時
     * @type {string}
     * @memberof VcSchema
     */
    createdAt: string;
    /**
     * (必須) VCスキーマの更新日時
     * @type {string}
     * @memberof VcSchema
     */
    updatedAt: string;
}
/**
 * 
 * @export
 * @interface VcSchemaProperty
 */
export interface VcSchemaProperty {
    /**
     * The ID of the vcSchema
     * @type {string}
     * @memberof VcSchemaProperty
     */
    id: string;
    /**
     * property Index number
     * @type {number}
     * @memberof VcSchemaProperty
     */
    propIndex: number;
    /**
     * property Name of credentialSubject
     * @type {string}
     * @memberof VcSchemaProperty
     */
    propName: string;
    /**
     * property Type of credentialSubject
     * @type {string}
     * @memberof VcSchemaProperty
     */
    propType: string;
    /**
     * parent property
     * @type {number}
     * @memberof VcSchemaProperty
     */
    parentObjectIndex: number;
    /**
     * The VcSchema is origin
     * @type {VcSchema}
     * @memberof VcSchemaProperty
     */
    vcSchema?: VcSchema;
    /**
     * The date the user was created
     * @type {string}
     * @memberof VcSchemaProperty
     */
    createdAt: string;
    /**
     * The date the user was last updated
     * @type {string}
     * @memberof VcSchemaProperty
     */
    updatedAt: string;
}
/**
 * 
 * @export
 * @interface VcSchemaResponseDto
 */
export interface VcSchemaResponseDto {
    /**
     * VCスキーマの識別子
     * @type {string}
     * @memberof VcSchemaResponseDto
     */
    id: string;
    /**
     * VCスキーマのタイトル
     * @type {string}
     * @memberof VcSchemaResponseDto
     */
    title: string;
    /**
     * VCスキーマのバージョン
     * @type {string}
     * @memberof VcSchemaResponseDto
     */
    version: string;
    /**
     * VCスキーマの説明文
     * @type {string}
     * @memberof VcSchemaResponseDto
     */
    description: string;
    /**
     * VCスキーマがバッジのスキーマか否か
     * @type {string}
     * @memberof VcSchemaResponseDto
     */
    isBadgeSchema: string;
    /**
     * 
     * @type {Array<VcInfo>}
     * @memberof VcSchemaResponseDto
     */
    vcInfos: Array<VcInfo>;
    /**
     * VCのスキーマのJSONスキーマコンテキスト
     * @type {Array<VcContext>}
     * @memberof VcSchemaResponseDto
     */
    vcContexts: Array<VcContext>;
    /**
     * VCのスキーマの各項目における項目名と項目型のオブジェクトの配列
     * @type {Array<VcSchemaProperty>}
     * @memberof VcSchemaResponseDto
     */
    vcSchemaProperties: Array<VcSchemaProperty>;
    /**
     * 
     * @type {Array<Group>}
     * @memberof VcSchemaResponseDto
     */
    groups: Array<Group>;
    /**
     * VCスキーマを紐付けたバッジ
     * @type {Array<Badge>}
     * @memberof VcSchemaResponseDto
     */
    badges: Array<Badge>;
    /**
     * VCスキーマに紐付けるバッジ用の画像。`isBadgeSchema`プロパティが`true`の場合必須。
     * @type {any}
     * @memberof VcSchemaResponseDto
     */
    file: any;
    /**
     * VCスキーマを作成したユーザーアカウント
     * @type {User}
     * @memberof VcSchemaResponseDto
     */
    createdBy: User;
    /**
     * VCスキーマの作成日時
     * @type {string}
     * @memberof VcSchemaResponseDto
     */
    createdAt: string;
    /**
     * VCスキーマの最終更新日時
     * @type {string}
     * @memberof VcSchemaResponseDto
     */
    updatedAt: string;
}
/**
 * 
 * @export
 * @interface VcSchemasResponseDto
 */
export interface VcSchemasResponseDto {
    /**
     * Array of VC schema items
     * @type {Array<VcSchema>}
     * @memberof VcSchemasResponseDto
     */
    items: Array<VcSchema>;
    /**
     * 
     * @type {MetaDto}
     * @memberof VcSchemasResponseDto
     */
    meta: MetaDto;
    /**
     * 
     * @type {LinkDto}
     * @memberof VcSchemasResponseDto
     */
    links: LinkDto;
}
/**
 * 
 * @export
 * @interface Verification
 */
export interface Verification {
    /**
     * (必須) 検証結果の識別子
     * @type {string}
     * @memberof Verification
     */
    id: string;
    /**
     * (必須) 検証結果の識別や整理などの管理するにあったてメタデータとして任意で設定可能な単語のフレーズ。(例: verify-for-check)
     * @type {string}
     * @memberof Verification
     */
    label: string;
    /**
     * (必須) VC/VPの検証結果(true: 検証に成功, false: 検証に失敗)
     * @type {boolean}
     * @memberof Verification
     */
    result: boolean;
    /**
     * (任意) 検証結果を作成したユーザーアカウント
     * @type {User}
     * @memberof Verification
     */
    createdBy: User;
    /**
     * (任意) 検証を実行したVC情報の識別子
     * @type {VcInfo}
     * @memberof Verification
     */
    vcInfo?: VcInfo;
    /**
     * (任意) 検証を実行したVP情報の識別子
     * @type {VpInfo}
     * @memberof Verification
     */
    vpInfo?: VpInfo;
    /**
     * (必須) 検証実行時の日時
     * @type {string}
     * @memberof Verification
     */
    createdAt: string;
    /**
     * (必須) 検証結果の最終更新日
     * @type {string}
     * @memberof Verification
     */
    updatedAt: string;
}
/**
 * 
 * @export
 * @interface VerificationDto
 */
export interface VerificationDto {
    /**
     * (必須) 検証結果の識別や整理などの管理するにあったてメタデータとして任意で設定可能な単語のフレーズ。(例: verify-for-check)
     * @type {string}
     * @memberof VerificationDto
     */
    label?: string;
    /**
     * (任意) 検証を実行するVC情報の識別子。VC情報の識別子を指定して検証を実行する場合は必須。
     * @type {string}
     * @memberof VerificationDto
     */
    vcInfoId?: string;
    /**
     * (任意) 検証を実行するVP情報の識別子。VP情報の識別子を指定して検証を実行する場合は必須。
     * @type {string}
     * @memberof VerificationDto
     */
    vpInfoId?: string;
    /**
     * (任意) 検証を実行するVCのJSONテキストデータ。VCのJSONテキストデータを入力して検証を実行する場合は必須。
     * @type {any}
     * @memberof VerificationDto
     */
    vcObject?: any;
    /**
     * (任意) 検証を実行するVPのJSONテキストデータ。VPのJSONテキストデータを入力して検証を実行する場合は必須。
     * @type {any}
     * @memberof VerificationDto
     */
    vpObject?: any;
}
/**
 * 
 * @export
 * @interface VerificationResponseDto
 */
export interface VerificationResponseDto {
    /**
     * 検証結果の識別子
     * @type {string}
     * @memberof VerificationResponseDto
     */
    id: string;
    /**
     * 検証結果の識別や整理などの管理するにあったてメタデータとして任意で設定可能な単語のフレーズ。(例: verify-for-check)
     * @type {string}
     * @memberof VerificationResponseDto
     */
    label: string;
    /**
     * (必須) VC/VPの検証結果(true: 検証に成功, false: 検証に失敗)
     * @type {boolean}
     * @memberof VerificationResponseDto
     */
    result: boolean;
    /**
     * グループを作成したユーザーアカウント
     * @type {User}
     * @memberof VerificationResponseDto
     */
    createdBy: User;
    /**
     * 検証を実行したVC情報の識別子
     * @type {VcInfo}
     * @memberof VerificationResponseDto
     */
    vcInfo: VcInfo;
    /**
     * 検証を実行したVP情報の識別子
     * @type {VpInfo}
     * @memberof VerificationResponseDto
     */
    vpInfo: VpInfo;
    /**
     * 検証実行時の日時
     * @type {string}
     * @memberof VerificationResponseDto
     */
    createdAt: string;
    /**
     * 検証結果の最終更新日
     * @type {string}
     * @memberof VerificationResponseDto
     */
    updatedAt: string;
}
/**
 * 
 * @export
 * @interface VerificationsResponseDto
 */
export interface VerificationsResponseDto {
    /**
     * 
     * @type {Array<Verification>}
     * @memberof VerificationsResponseDto
     */
    items: Array<Verification>;
    /**
     * 
     * @type {MetaDto}
     * @memberof VerificationsResponseDto
     */
    meta: MetaDto;
    /**
     * 
     * @type {LinkDto}
     * @memberof VerificationsResponseDto
     */
    links: LinkDto;
}
/**
 * 
 * @export
 * @interface VerifiyBadgeFileReponseDto
 */
export interface VerifiyBadgeFileReponseDto {
    /**
     * (任意) 
     * @type {boolean}
     * @memberof VerifiyBadgeFileReponseDto
     */
    result: boolean;
    /**
     * (任意) 
     * @type {boolean}
     * @memberof VerifiyBadgeFileReponseDto
     */
    filename: boolean;
}
/**
 * 
 * @export
 * @interface VerifiyBadgeReponseDto
 */
export interface VerifiyBadgeReponseDto {
    /**
     * (任意) 
     * @type {boolean}
     * @memberof VerifiyBadgeReponseDto
     */
    result: boolean;
}
/**
 * 
 * @export
 * @interface VerifyBadgeDto
 */
export interface VerifyBadgeDto {
    /**
     * (任意) バッジに紐づいたVC情報を検証するか否か。`true`の場合VC情報をfalseの場合`vpInfoId`で指定されたVP情報を検証する
     * @type {boolean}
     * @memberof VerifyBadgeDto
     */
    veriifyVC?: boolean;
    /**
     * (任意) 
     * @type {string}
     * @memberof VerifyBadgeDto
     */
    vpInfoId: string;
}
/**
 * 
 * @export
 * @interface VpInfo
 */
export interface VpInfo {
    /**
     * (必須) VP情報の識別子
     * @type {string}
     * @memberof VpInfo
     */
    id: string;
    /**
     * (任意) VPの識別や整理などの管理するにあったてメタデータとして任意で設定可能な単語のフレーズ
     * @type {string}
     * @memberof VpInfo
     */
    label?: string;
    /**
     * (必須) VPのハッシュ値。VPの保管における識別子として用いる。
     * @type {string}
     * @memberof VpInfo
     */
    hash?: string;
    /**
     * (任意) VCの発行目的や用途など任意で設定可能な説明文。
     * @type {string}
     * @memberof VpInfo
     */
    description?: string;
    /**
     * (必須) VPのバイナリデータ
     * @type {string}
     * @memberof VpInfo
     */
    raw: string;
    /**
     * (任意) VP情報を生成したユーザーアカウント
     * @type {User}
     * @memberof VpInfo
     */
    createdBy: User;
    /**
     * (任意) VP情報と紐付いたアカウント
     * @type {User}
     * @memberof VpInfo
     */
    user?: User;
    /**
     * (任意) VPを生成する元となるVC情報
     * @type {Array<VcInfo>}
     * @memberof VpInfo
     */
    vcInfos?: Array<VcInfo>;
    /**
     * (任意) VP情報に紐づいたグループの配列
     * @type {Array<Group>}
     * @memberof VpInfo
     */
    groups?: Array<Group>;
    /**
     * (任意) VP生成時の署名に用いるDID情報の識別子
     * @type {DidInfo}
     * @memberof VpInfo
     */
    didInfo?: DidInfo;
    /**
     * (任意) VPの検証結果
     * @type {Array<Verification>}
     * @memberof VpInfo
     */
    verifications?: Array<Verification>;
    /**
     * (必須) VP情報の作成日時
     * @type {string}
     * @memberof VpInfo
     */
    createdAt: string;
    /**
     * (必須) VP情報の更新日時
     * @type {string}
     * @memberof VpInfo
     */
    updatedAt: string;
}
/**
 * 
 * @export
 * @interface VpInfoDetailDto
 */
export interface VpInfoDetailDto {
    /**
     * VP情報
     * @type {VpInfo}
     * @memberof VpInfoDetailDto
     */
    vpInfo: VpInfo;
    /**
     * 
     * @type {any}
     * @memberof VpInfoDetailDto
     */
    vpObject: any;
}
/**
 * 
 * @export
 * @interface VpInfoResponseDto
 */
export interface VpInfoResponseDto {
    /**
     * 
     * @type {Array<VpInfo>}
     * @memberof VpInfoResponseDto
     */
    items: Array<VpInfo>;
    /**
     * 
     * @type {MetaDto}
     * @memberof VpInfoResponseDto
     */
    meta: MetaDto;
    /**
     * 
     * @type {LinkDto}
     * @memberof VpInfoResponseDto
     */
    links: LinkDto;
}
/**
 * AuthApi - fetch parameter creator
 * @export
 */
export const AuthApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * ログイン済みの管理者アカウントの情報を返却します。
         * @summary ログイン済みのアカウント情報取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerGetProfile(options: any = {}): FetchArgs {
            const localVarPath = `/api/v1/auth/profile`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * アカウントログインを実行し、認証結果に応じてJSON Web Tokenの値を返します。
         * @summary アカウントログインを実施
         * @param {SignInDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogin(body: SignInDto, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling authControllerLogin.');
            }
            const localVarPath = `/api/v1/auth/login`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"SignInDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    return {
        /**
         * ログイン済みの管理者アカウントの情報を返却します。
         * @summary ログイン済みのアカウント情報取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerGetProfile(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetProfileResponseDto> {
            const localVarFetchArgs = AuthApiFetchParamCreator(configuration).authControllerGetProfile(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * アカウントログインを実行し、認証結果に応じてJSON Web Tokenの値を返します。
         * @summary アカウントログインを実施
         * @param {SignInDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogin(body: SignInDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<SignInResponseDto> {
            const localVarFetchArgs = AuthApiFetchParamCreator(configuration).authControllerLogin(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * ログイン済みの管理者アカウントの情報を返却します。
         * @summary ログイン済みのアカウント情報取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerGetProfile(options?: any) {
            return AuthApiFp(configuration).authControllerGetProfile(options)(fetch, basePath);
        },
        /**
         * アカウントログインを実行し、認証結果に応じてJSON Web Tokenの値を返します。
         * @summary アカウントログインを実施
         * @param {SignInDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogin(body: SignInDto, options?: any) {
            return AuthApiFp(configuration).authControllerLogin(body, options)(fetch, basePath);
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * ログイン済みの管理者アカウントの情報を返却します。
     * @summary ログイン済みのアカウント情報取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerGetProfile(options?: any) {
        return AuthApiFp(this.configuration).authControllerGetProfile(options)(this.fetch, this.basePath);
    }

    /**
     * アカウントログインを実行し、認証結果に応じてJSON Web Tokenの値を返します。
     * @summary アカウントログインを実施
     * @param {SignInDto} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerLogin(body: SignInDto, options?: any) {
        return AuthApiFp(this.configuration).authControllerLogin(body, options)(this.fetch, this.basePath);
    }

}
/**
 * BadgesApi - fetch parameter creator
 * @export
 */
export const BadgesApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * リクエストパラメータのidで指定された単一のBadgeに対して、任意の管理用ラベルを追加します。
         * @summary Badgeへのラベル追加
         * @param {AddLabelToBadgeDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        badgesControllerAddLabel(body: AddLabelToBadgeDto, id: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling badgesControllerAddLabel.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling badgesControllerAddLabel.');
            }
            const localVarPath = `/api/v1/badges/{id}/label`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"AddLabelToBadgeDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 新規バッジを発行します。
         * @summary 新規バッジ発行
         * @param {CreateBadgeDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        badgesControllerCreate(body: CreateBadgeDto, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling badgesControllerCreate.');
            }
            const localVarPath = `/api/v1/badges`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CreateBadgeDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * リクエストパラメータのidで指定された単一のバッジ画像のバイナリデータを返します。
         * @summary バッジダウンロード
         * @param {string} id 
         * @param {string} vpInfoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        badgesControllerDownload(id: string, vpInfoId: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling badgesControllerDownload.');
            }
            // verify required parameter 'vpInfoId' is not null or undefined
            if (vpInfoId === null || vpInfoId === undefined) {
                throw new RequiredError('vpInfoId','Required parameter vpInfoId was null or undefined when calling badgesControllerDownload.');
            }
            const localVarPath = `/api/v1/badges/{id}/download`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            if (vpInfoId !== undefined) {
                localVarQueryParameter['vpInfoId'] = vpInfoId;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary バッジファイル検証
         * @param {Blob} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        badgesControllerFileVerify(file: Blob, options: any = {}): FetchArgs {
            // verify required parameter 'file' is not null or undefined
            if (file === null || file === undefined) {
                throw new RequiredError('file','Required parameter file was null or undefined when calling badgesControllerFileVerify.');
            }
            const localVarPath = `/api/v1/badges/file`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication bearer required

            if (file !== undefined) {
                localVarFormParams.set('file', file as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * アプリケーションが管理するバッジ情報を一覧として値を返します。
         * @summary バッジ一覧取得
         * @param {number} [page] (必須) ページネーションを表示する際のページ数に当たるクエリパラメーター。全件取得する際は1を指定。(デフォルト: 1)
         * @param {number} [limit] (必須) ページネーションを表示する際のページ数あたりに表示する件数を指定するクエリパラメーター。全件取得する際は0を指定。(デフォルト: 10)
         * @param {string} [label] (任意) 例: \&quot;sample-badge-1\&quot;
         * @param {string} [filename] (任意) 例: \&quot;badge-12345-12345.png\&quot;
         * @param {string} [description] (任意) 
         * @param {number} [status] (任意) 例: 1
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        badgesControllerFindAll(page?: number, limit?: number, label?: string, filename?: string, description?: string, status?: number, options: any = {}): FetchArgs {
            const localVarPath = `/api/v1/badges`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (label !== undefined) {
                localVarQueryParameter['label'] = label;
            }

            if (filename !== undefined) {
                localVarQueryParameter['filename'] = filename;
            }

            if (description !== undefined) {
                localVarQueryParameter['description'] = description;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * リクエストパラメータのidで指定された単一のバッジ情報の詳細情報の値を返します。
         * @summary バッジ詳細取得
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        badgesControllerFindOne(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling badgesControllerFindOne.');
            }
            const localVarPath = `/api/v1/badges/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * バッジのVC/VPの検証を実行します。
         * @summary バッジ検証
         * @param {VerifyBadgeDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        badgesControllerVerify(body: VerifyBadgeDto, id: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling badgesControllerVerify.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling badgesControllerVerify.');
            }
            const localVarPath = `/api/v1/badges/{id}/verify`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"VerifyBadgeDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BadgesApi - functional programming interface
 * @export
 */
export const BadgesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * リクエストパラメータのidで指定された単一のBadgeに対して、任意の管理用ラベルを追加します。
         * @summary Badgeへのラベル追加
         * @param {AddLabelToBadgeDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        badgesControllerAddLabel(body: AddLabelToBadgeDto, id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<BadgeResponseDto> {
            const localVarFetchArgs = BadgesApiFetchParamCreator(configuration).badgesControllerAddLabel(body, id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 新規バッジを発行します。
         * @summary 新規バッジ発行
         * @param {CreateBadgeDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        badgesControllerCreate(body: CreateBadgeDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<BadgeResponseDto> {
            const localVarFetchArgs = BadgesApiFetchParamCreator(configuration).badgesControllerCreate(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * リクエストパラメータのidで指定された単一のバッジ画像のバイナリデータを返します。
         * @summary バッジダウンロード
         * @param {string} id 
         * @param {string} vpInfoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        badgesControllerDownload(id: string, vpInfoId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Blob> {
            const localVarFetchArgs = BadgesApiFetchParamCreator(configuration).badgesControllerDownload(id, vpInfoId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary バッジファイル検証
         * @param {Blob} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        badgesControllerFileVerify(file: Blob, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<VerifiyBadgeFileReponseDto> {
            const localVarFetchArgs = BadgesApiFetchParamCreator(configuration).badgesControllerFileVerify(file, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * アプリケーションが管理するバッジ情報を一覧として値を返します。
         * @summary バッジ一覧取得
         * @param {number} [page] (必須) ページネーションを表示する際のページ数に当たるクエリパラメーター。全件取得する際は1を指定。(デフォルト: 1)
         * @param {number} [limit] (必須) ページネーションを表示する際のページ数あたりに表示する件数を指定するクエリパラメーター。全件取得する際は0を指定。(デフォルト: 10)
         * @param {string} [label] (任意) 例: \&quot;sample-badge-1\&quot;
         * @param {string} [filename] (任意) 例: \&quot;badge-12345-12345.png\&quot;
         * @param {string} [description] (任意) 
         * @param {number} [status] (任意) 例: 1
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        badgesControllerFindAll(page?: number, limit?: number, label?: string, filename?: string, description?: string, status?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<BadgesResponseDto> {
            const localVarFetchArgs = BadgesApiFetchParamCreator(configuration).badgesControllerFindAll(page, limit, label, filename, description, status, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * リクエストパラメータのidで指定された単一のバッジ情報の詳細情報の値を返します。
         * @summary バッジ詳細取得
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        badgesControllerFindOne(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<BadgeResponseDto> {
            const localVarFetchArgs = BadgesApiFetchParamCreator(configuration).badgesControllerFindOne(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * バッジのVC/VPの検証を実行します。
         * @summary バッジ検証
         * @param {VerifyBadgeDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        badgesControllerVerify(body: VerifyBadgeDto, id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<VerifiyBadgeReponseDto> {
            const localVarFetchArgs = BadgesApiFetchParamCreator(configuration).badgesControllerVerify(body, id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * BadgesApi - factory interface
 * @export
 */
export const BadgesApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * リクエストパラメータのidで指定された単一のBadgeに対して、任意の管理用ラベルを追加します。
         * @summary Badgeへのラベル追加
         * @param {AddLabelToBadgeDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        badgesControllerAddLabel(body: AddLabelToBadgeDto, id: string, options?: any) {
            return BadgesApiFp(configuration).badgesControllerAddLabel(body, id, options)(fetch, basePath);
        },
        /**
         * 新規バッジを発行します。
         * @summary 新規バッジ発行
         * @param {CreateBadgeDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        badgesControllerCreate(body: CreateBadgeDto, options?: any) {
            return BadgesApiFp(configuration).badgesControllerCreate(body, options)(fetch, basePath);
        },
        /**
         * リクエストパラメータのidで指定された単一のバッジ画像のバイナリデータを返します。
         * @summary バッジダウンロード
         * @param {string} id 
         * @param {string} vpInfoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        badgesControllerDownload(id: string, vpInfoId: string, options?: any) {
            return BadgesApiFp(configuration).badgesControllerDownload(id, vpInfoId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary バッジファイル検証
         * @param {Blob} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        badgesControllerFileVerify(file: Blob, options?: any) {
            return BadgesApiFp(configuration).badgesControllerFileVerify(file, options)(fetch, basePath);
        },
        /**
         * アプリケーションが管理するバッジ情報を一覧として値を返します。
         * @summary バッジ一覧取得
         * @param {number} [page] (必須) ページネーションを表示する際のページ数に当たるクエリパラメーター。全件取得する際は1を指定。(デフォルト: 1)
         * @param {number} [limit] (必須) ページネーションを表示する際のページ数あたりに表示する件数を指定するクエリパラメーター。全件取得する際は0を指定。(デフォルト: 10)
         * @param {string} [label] (任意) 例: \&quot;sample-badge-1\&quot;
         * @param {string} [filename] (任意) 例: \&quot;badge-12345-12345.png\&quot;
         * @param {string} [description] (任意) 
         * @param {number} [status] (任意) 例: 1
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        badgesControllerFindAll(page?: number, limit?: number, label?: string, filename?: string, description?: string, status?: number, options?: any) {
            return BadgesApiFp(configuration).badgesControllerFindAll(page, limit, label, filename, description, status, options)(fetch, basePath);
        },
        /**
         * リクエストパラメータのidで指定された単一のバッジ情報の詳細情報の値を返します。
         * @summary バッジ詳細取得
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        badgesControllerFindOne(id: string, options?: any) {
            return BadgesApiFp(configuration).badgesControllerFindOne(id, options)(fetch, basePath);
        },
        /**
         * バッジのVC/VPの検証を実行します。
         * @summary バッジ検証
         * @param {VerifyBadgeDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        badgesControllerVerify(body: VerifyBadgeDto, id: string, options?: any) {
            return BadgesApiFp(configuration).badgesControllerVerify(body, id, options)(fetch, basePath);
        },
    };
};

/**
 * BadgesApi - object-oriented interface
 * @export
 * @class BadgesApi
 * @extends {BaseAPI}
 */
export class BadgesApi extends BaseAPI {
    /**
     * リクエストパラメータのidで指定された単一のBadgeに対して、任意の管理用ラベルを追加します。
     * @summary Badgeへのラベル追加
     * @param {AddLabelToBadgeDto} body 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BadgesApi
     */
    public badgesControllerAddLabel(body: AddLabelToBadgeDto, id: string, options?: any) {
        return BadgesApiFp(this.configuration).badgesControllerAddLabel(body, id, options)(this.fetch, this.basePath);
    }

    /**
     * 新規バッジを発行します。
     * @summary 新規バッジ発行
     * @param {CreateBadgeDto} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BadgesApi
     */
    public badgesControllerCreate(body: CreateBadgeDto, options?: any) {
        return BadgesApiFp(this.configuration).badgesControllerCreate(body, options)(this.fetch, this.basePath);
    }

    /**
     * リクエストパラメータのidで指定された単一のバッジ画像のバイナリデータを返します。
     * @summary バッジダウンロード
     * @param {string} id 
     * @param {string} vpInfoId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BadgesApi
     */
    public badgesControllerDownload(id: string, vpInfoId: string, options?: any) {
        return BadgesApiFp(this.configuration).badgesControllerDownload(id, vpInfoId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary バッジファイル検証
     * @param {Blob} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BadgesApi
     */
    public badgesControllerFileVerify(file: Blob, options?: any) {
        return BadgesApiFp(this.configuration).badgesControllerFileVerify(file, options)(this.fetch, this.basePath);
    }

    /**
     * アプリケーションが管理するバッジ情報を一覧として値を返します。
     * @summary バッジ一覧取得
     * @param {number} [page] (必須) ページネーションを表示する際のページ数に当たるクエリパラメーター。全件取得する際は1を指定。(デフォルト: 1)
     * @param {number} [limit] (必須) ページネーションを表示する際のページ数あたりに表示する件数を指定するクエリパラメーター。全件取得する際は0を指定。(デフォルト: 10)
     * @param {string} [label] (任意) 例: \&quot;sample-badge-1\&quot;
     * @param {string} [filename] (任意) 例: \&quot;badge-12345-12345.png\&quot;
     * @param {string} [description] (任意) 
     * @param {number} [status] (任意) 例: 1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BadgesApi
     */
    public badgesControllerFindAll(page?: number, limit?: number, label?: string, filename?: string, description?: string, status?: number, options?: any) {
        return BadgesApiFp(this.configuration).badgesControllerFindAll(page, limit, label, filename, description, status, options)(this.fetch, this.basePath);
    }

    /**
     * リクエストパラメータのidで指定された単一のバッジ情報の詳細情報の値を返します。
     * @summary バッジ詳細取得
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BadgesApi
     */
    public badgesControllerFindOne(id: string, options?: any) {
        return BadgesApiFp(this.configuration).badgesControllerFindOne(id, options)(this.fetch, this.basePath);
    }

    /**
     * バッジのVC/VPの検証を実行します。
     * @summary バッジ検証
     * @param {VerifyBadgeDto} body 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BadgesApi
     */
    public badgesControllerVerify(body: VerifyBadgeDto, id: string, options?: any) {
        return BadgesApiFp(this.configuration).badgesControllerVerify(body, id, options)(this.fetch, this.basePath);
    }

}
/**
 * DidInfosApi - fetch parameter creator
 * @export
 */
export const DidInfosApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * リクエストパラメータのidで指定された単一のDID情報に対して、任意の管理用ラベルを追加します。
         * @summary DID情報へのラベル追加
         * @param {AddLabelToDidInfoDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        didInfosControllerAddLabel(body: AddLabelToDidInfoDto, id: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling didInfosControllerAddLabel.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling didInfosControllerAddLabel.');
            }
            const localVarPath = `/api/v1/did-infos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"AddLabelToDidInfoDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * DID情報の所有者、関係者などの管理者としてクライアントアカウントを紐付けます。
         * @summary DID情報へのクライアントアカウント紐付け
         * @param {string} id 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        didInfosControllerConnectUser(id: string, userId: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling didInfosControllerConnectUser.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling didInfosControllerConnectUser.');
            }
            const localVarPath = `/api/v1/did-infos/{id}/user/{user_id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 新規DIDを生成します。
         * @summary 新規DID生成
         * @param {CreateDidDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        didInfosControllerCreate(body: CreateDidDto, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling didInfosControllerCreate.');
            }
            const localVarPath = `/api/v1/did-infos`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CreateDidDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * DID情報に紐付いたクライアントアカウントの紐付けを解除します。
         * @summary DID情報のクライアントアカウント紐付け解除
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        didInfosControllerDisconnectUser(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling didInfosControllerDisconnectUser.');
            }
            const localVarPath = `/api/v1/did-infos/{id}/user`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * アプリケーションが管理するDID情報を一覧として値を返します。
         * @summary DID情報一覧取得
         * @param {number} [page] (必須) ページネーションを表示する際のページ数に当たるクエリパラメーター。全件取得する際は1を指定。(デフォルト: 1)
         * @param {number} [limit] (必須) ページネーションを表示する際のページ数あたりに表示する件数を指定するクエリパラメーター。全件取得する際は0を指定。(デフォルト: 10)
         * @param {string} [did] (任意) 例: \&quot;did:key:z6MkhGeGj7u5htkCYjE4PaQ8HUqjYyTmxpDb6Q1MqUpUDsN7\&quot;
         * @param {string} [manageUuid] (任意) 例: \&quot;32bad62a-4186-4d04-a26a-fcee79d5824b\&quot;
         * @param {string} [label] (任意) 例: \&quot;did-for-project1\&quot;
         * @param {string} [method] (任意) 例: \&quot;did:key
         * @param {boolean} [existPrivateKey] (任意) 例: true
         * @param {string} [description] (任意) 
         * @param {string} [domainName] (任意) 例: \&quot;did:web:idroit-dashboard.com\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        didInfosControllerFindAll(page?: number, limit?: number, did?: string, manageUuid?: string, label?: string, method?: string, existPrivateKey?: boolean, description?: string, domainName?: string, options: any = {}): FetchArgs {
            const localVarPath = `/api/v1/did-infos`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (did !== undefined) {
                localVarQueryParameter['did'] = did;
            }

            if (manageUuid !== undefined) {
                localVarQueryParameter['manageUuid'] = manageUuid;
            }

            if (label !== undefined) {
                localVarQueryParameter['label'] = label;
            }

            if (method !== undefined) {
                localVarQueryParameter['method'] = method;
            }

            if (existPrivateKey !== undefined) {
                localVarQueryParameter['existPrivateKey'] = existPrivateKey;
            }

            if (description !== undefined) {
                localVarQueryParameter['description'] = description;
            }

            if (domainName !== undefined) {
                localVarQueryParameter['domainName'] = domainName;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * リクエストパラメータのidで指定された単一のDID情報の詳細情報の値を返します。
         * @summary DID情報詳細取得
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        didInfosControllerFindOne(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling didInfosControllerFindOne.');
            }
            const localVarPath = `/api/v1/did-infos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 外部で生成されたDIDを本アプリケーションに取り込みます。
         * @summary 既存DID登録
         * @param {RegisterDidDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        didInfosControllerRegister(body: RegisterDidDto, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling didInfosControllerRegister.');
            }
            const localVarPath = `/api/v1/did-infos/register`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"RegisterDidDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * リクエストパラメータのidで指定された単一のDID情報を削除します。
         * @summary DID情報削除
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        didInfosControllerRemove(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling didInfosControllerRemove.');
            }
            const localVarPath = `/api/v1/did-infos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * DIDを解決した結果であるDID Documentの値を返します。このAPIでは保存などの処理を行いません。生成済みのDIDを保存したい場合、既存DID登録API(/did-infos/register)にリクエストを送信してください。
         * @summary DID解決
         * @param {ResolveDidDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        didInfosControllerResolve(body: ResolveDidDto, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling didInfosControllerResolve.');
            }
            const localVarPath = `/api/v1/did-infos/resolver`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ResolveDidDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DidInfosApi - functional programming interface
 * @export
 */
export const DidInfosApiFp = function(configuration?: Configuration) {
    return {
        /**
         * リクエストパラメータのidで指定された単一のDID情報に対して、任意の管理用ラベルを追加します。
         * @summary DID情報へのラベル追加
         * @param {AddLabelToDidInfoDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        didInfosControllerAddLabel(body: AddLabelToDidInfoDto, id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DidInfoResponseDto> {
            const localVarFetchArgs = DidInfosApiFetchParamCreator(configuration).didInfosControllerAddLabel(body, id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * DID情報の所有者、関係者などの管理者としてクライアントアカウントを紐付けます。
         * @summary DID情報へのクライアントアカウント紐付け
         * @param {string} id 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        didInfosControllerConnectUser(id: string, userId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DidInfoResponseDto> {
            const localVarFetchArgs = DidInfosApiFetchParamCreator(configuration).didInfosControllerConnectUser(id, userId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 新規DIDを生成します。
         * @summary 新規DID生成
         * @param {CreateDidDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        didInfosControllerCreate(body: CreateDidDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DidInfosApiFetchParamCreator(configuration).didInfosControllerCreate(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * DID情報に紐付いたクライアントアカウントの紐付けを解除します。
         * @summary DID情報のクライアントアカウント紐付け解除
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        didInfosControllerDisconnectUser(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DidInfosApiFetchParamCreator(configuration).didInfosControllerDisconnectUser(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * アプリケーションが管理するDID情報を一覧として値を返します。
         * @summary DID情報一覧取得
         * @param {number} [page] (必須) ページネーションを表示する際のページ数に当たるクエリパラメーター。全件取得する際は1を指定。(デフォルト: 1)
         * @param {number} [limit] (必須) ページネーションを表示する際のページ数あたりに表示する件数を指定するクエリパラメーター。全件取得する際は0を指定。(デフォルト: 10)
         * @param {string} [did] (任意) 例: \&quot;did:key:z6MkhGeGj7u5htkCYjE4PaQ8HUqjYyTmxpDb6Q1MqUpUDsN7\&quot;
         * @param {string} [manageUuid] (任意) 例: \&quot;32bad62a-4186-4d04-a26a-fcee79d5824b\&quot;
         * @param {string} [label] (任意) 例: \&quot;did-for-project1\&quot;
         * @param {string} [method] (任意) 例: \&quot;did:key
         * @param {boolean} [existPrivateKey] (任意) 例: true
         * @param {string} [description] (任意) 
         * @param {string} [domainName] (任意) 例: \&quot;did:web:idroit-dashboard.com\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        didInfosControllerFindAll(page?: number, limit?: number, did?: string, manageUuid?: string, label?: string, method?: string, existPrivateKey?: boolean, description?: string, domainName?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DidInfosResponseDto> {
            const localVarFetchArgs = DidInfosApiFetchParamCreator(configuration).didInfosControllerFindAll(page, limit, did, manageUuid, label, method, existPrivateKey, description, domainName, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * リクエストパラメータのidで指定された単一のDID情報の詳細情報の値を返します。
         * @summary DID情報詳細取得
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        didInfosControllerFindOne(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DidInfoResponseDto> {
            const localVarFetchArgs = DidInfosApiFetchParamCreator(configuration).didInfosControllerFindOne(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 外部で生成されたDIDを本アプリケーションに取り込みます。
         * @summary 既存DID登録
         * @param {RegisterDidDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        didInfosControllerRegister(body: RegisterDidDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DidInfosApiFetchParamCreator(configuration).didInfosControllerRegister(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * リクエストパラメータのidで指定された単一のDID情報を削除します。
         * @summary DID情報削除
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        didInfosControllerRemove(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DidInfosApiFetchParamCreator(configuration).didInfosControllerRemove(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * DIDを解決した結果であるDID Documentの値を返します。このAPIでは保存などの処理を行いません。生成済みのDIDを保存したい場合、既存DID登録API(/did-infos/register)にリクエストを送信してください。
         * @summary DID解決
         * @param {ResolveDidDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        didInfosControllerResolve(body: ResolveDidDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ResolveDidResponseDto> {
            const localVarFetchArgs = DidInfosApiFetchParamCreator(configuration).didInfosControllerResolve(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * DidInfosApi - factory interface
 * @export
 */
export const DidInfosApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * リクエストパラメータのidで指定された単一のDID情報に対して、任意の管理用ラベルを追加します。
         * @summary DID情報へのラベル追加
         * @param {AddLabelToDidInfoDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        didInfosControllerAddLabel(body: AddLabelToDidInfoDto, id: string, options?: any) {
            return DidInfosApiFp(configuration).didInfosControllerAddLabel(body, id, options)(fetch, basePath);
        },
        /**
         * DID情報の所有者、関係者などの管理者としてクライアントアカウントを紐付けます。
         * @summary DID情報へのクライアントアカウント紐付け
         * @param {string} id 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        didInfosControllerConnectUser(id: string, userId: string, options?: any) {
            return DidInfosApiFp(configuration).didInfosControllerConnectUser(id, userId, options)(fetch, basePath);
        },
        /**
         * 新規DIDを生成します。
         * @summary 新規DID生成
         * @param {CreateDidDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        didInfosControllerCreate(body: CreateDidDto, options?: any) {
            return DidInfosApiFp(configuration).didInfosControllerCreate(body, options)(fetch, basePath);
        },
        /**
         * DID情報に紐付いたクライアントアカウントの紐付けを解除します。
         * @summary DID情報のクライアントアカウント紐付け解除
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        didInfosControllerDisconnectUser(id: string, options?: any) {
            return DidInfosApiFp(configuration).didInfosControllerDisconnectUser(id, options)(fetch, basePath);
        },
        /**
         * アプリケーションが管理するDID情報を一覧として値を返します。
         * @summary DID情報一覧取得
         * @param {number} [page] (必須) ページネーションを表示する際のページ数に当たるクエリパラメーター。全件取得する際は1を指定。(デフォルト: 1)
         * @param {number} [limit] (必須) ページネーションを表示する際のページ数あたりに表示する件数を指定するクエリパラメーター。全件取得する際は0を指定。(デフォルト: 10)
         * @param {string} [did] (任意) 例: \&quot;did:key:z6MkhGeGj7u5htkCYjE4PaQ8HUqjYyTmxpDb6Q1MqUpUDsN7\&quot;
         * @param {string} [manageUuid] (任意) 例: \&quot;32bad62a-4186-4d04-a26a-fcee79d5824b\&quot;
         * @param {string} [label] (任意) 例: \&quot;did-for-project1\&quot;
         * @param {string} [method] (任意) 例: \&quot;did:key
         * @param {boolean} [existPrivateKey] (任意) 例: true
         * @param {string} [description] (任意) 
         * @param {string} [domainName] (任意) 例: \&quot;did:web:idroit-dashboard.com\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        didInfosControllerFindAll(page?: number, limit?: number, did?: string, manageUuid?: string, label?: string, method?: string, existPrivateKey?: boolean, description?: string, domainName?: string, options?: any) {
            return DidInfosApiFp(configuration).didInfosControllerFindAll(page, limit, did, manageUuid, label, method, existPrivateKey, description, domainName, options)(fetch, basePath);
        },
        /**
         * リクエストパラメータのidで指定された単一のDID情報の詳細情報の値を返します。
         * @summary DID情報詳細取得
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        didInfosControllerFindOne(id: string, options?: any) {
            return DidInfosApiFp(configuration).didInfosControllerFindOne(id, options)(fetch, basePath);
        },
        /**
         * 外部で生成されたDIDを本アプリケーションに取り込みます。
         * @summary 既存DID登録
         * @param {RegisterDidDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        didInfosControllerRegister(body: RegisterDidDto, options?: any) {
            return DidInfosApiFp(configuration).didInfosControllerRegister(body, options)(fetch, basePath);
        },
        /**
         * リクエストパラメータのidで指定された単一のDID情報を削除します。
         * @summary DID情報削除
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        didInfosControllerRemove(id: string, options?: any) {
            return DidInfosApiFp(configuration).didInfosControllerRemove(id, options)(fetch, basePath);
        },
        /**
         * DIDを解決した結果であるDID Documentの値を返します。このAPIでは保存などの処理を行いません。生成済みのDIDを保存したい場合、既存DID登録API(/did-infos/register)にリクエストを送信してください。
         * @summary DID解決
         * @param {ResolveDidDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        didInfosControllerResolve(body: ResolveDidDto, options?: any) {
            return DidInfosApiFp(configuration).didInfosControllerResolve(body, options)(fetch, basePath);
        },
    };
};

/**
 * DidInfosApi - object-oriented interface
 * @export
 * @class DidInfosApi
 * @extends {BaseAPI}
 */
export class DidInfosApi extends BaseAPI {
    /**
     * リクエストパラメータのidで指定された単一のDID情報に対して、任意の管理用ラベルを追加します。
     * @summary DID情報へのラベル追加
     * @param {AddLabelToDidInfoDto} body 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DidInfosApi
     */
    public didInfosControllerAddLabel(body: AddLabelToDidInfoDto, id: string, options?: any) {
        return DidInfosApiFp(this.configuration).didInfosControllerAddLabel(body, id, options)(this.fetch, this.basePath);
    }

    /**
     * DID情報の所有者、関係者などの管理者としてクライアントアカウントを紐付けます。
     * @summary DID情報へのクライアントアカウント紐付け
     * @param {string} id 
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DidInfosApi
     */
    public didInfosControllerConnectUser(id: string, userId: string, options?: any) {
        return DidInfosApiFp(this.configuration).didInfosControllerConnectUser(id, userId, options)(this.fetch, this.basePath);
    }

    /**
     * 新規DIDを生成します。
     * @summary 新規DID生成
     * @param {CreateDidDto} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DidInfosApi
     */
    public didInfosControllerCreate(body: CreateDidDto, options?: any) {
        return DidInfosApiFp(this.configuration).didInfosControllerCreate(body, options)(this.fetch, this.basePath);
    }

    /**
     * DID情報に紐付いたクライアントアカウントの紐付けを解除します。
     * @summary DID情報のクライアントアカウント紐付け解除
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DidInfosApi
     */
    public didInfosControllerDisconnectUser(id: string, options?: any) {
        return DidInfosApiFp(this.configuration).didInfosControllerDisconnectUser(id, options)(this.fetch, this.basePath);
    }

    /**
     * アプリケーションが管理するDID情報を一覧として値を返します。
     * @summary DID情報一覧取得
     * @param {number} [page] (必須) ページネーションを表示する際のページ数に当たるクエリパラメーター。全件取得する際は1を指定。(デフォルト: 1)
     * @param {number} [limit] (必須) ページネーションを表示する際のページ数あたりに表示する件数を指定するクエリパラメーター。全件取得する際は0を指定。(デフォルト: 10)
     * @param {string} [did] (任意) 例: \&quot;did:key:z6MkhGeGj7u5htkCYjE4PaQ8HUqjYyTmxpDb6Q1MqUpUDsN7\&quot;
     * @param {string} [manageUuid] (任意) 例: \&quot;32bad62a-4186-4d04-a26a-fcee79d5824b\&quot;
     * @param {string} [label] (任意) 例: \&quot;did-for-project1\&quot;
     * @param {string} [method] (任意) 例: \&quot;did:key
     * @param {boolean} [existPrivateKey] (任意) 例: true
     * @param {string} [description] (任意) 
     * @param {string} [domainName] (任意) 例: \&quot;did:web:idroit-dashboard.com\&quot;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DidInfosApi
     */
    public didInfosControllerFindAll(page?: number, limit?: number, did?: string, manageUuid?: string, label?: string, method?: string, existPrivateKey?: boolean, description?: string, domainName?: string, options?: any) {
        return DidInfosApiFp(this.configuration).didInfosControllerFindAll(page, limit, did, manageUuid, label, method, existPrivateKey, description, domainName, options)(this.fetch, this.basePath);
    }

    /**
     * リクエストパラメータのidで指定された単一のDID情報の詳細情報の値を返します。
     * @summary DID情報詳細取得
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DidInfosApi
     */
    public didInfosControllerFindOne(id: string, options?: any) {
        return DidInfosApiFp(this.configuration).didInfosControllerFindOne(id, options)(this.fetch, this.basePath);
    }

    /**
     * 外部で生成されたDIDを本アプリケーションに取り込みます。
     * @summary 既存DID登録
     * @param {RegisterDidDto} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DidInfosApi
     */
    public didInfosControllerRegister(body: RegisterDidDto, options?: any) {
        return DidInfosApiFp(this.configuration).didInfosControllerRegister(body, options)(this.fetch, this.basePath);
    }

    /**
     * リクエストパラメータのidで指定された単一のDID情報を削除します。
     * @summary DID情報削除
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DidInfosApi
     */
    public didInfosControllerRemove(id: string, options?: any) {
        return DidInfosApiFp(this.configuration).didInfosControllerRemove(id, options)(this.fetch, this.basePath);
    }

    /**
     * DIDを解決した結果であるDID Documentの値を返します。このAPIでは保存などの処理を行いません。生成済みのDIDを保存したい場合、既存DID登録API(/did-infos/register)にリクエストを送信してください。
     * @summary DID解決
     * @param {ResolveDidDto} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DidInfosApi
     */
    public didInfosControllerResolve(body: ResolveDidDto, options?: any) {
        return DidInfosApiFp(this.configuration).didInfosControllerResolve(body, options)(this.fetch, this.basePath);
    }

}
/**
 * FilesApi - fetch parameter creator
 * @export
 */
export const FilesApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * リクエストパラメータのidで指定された単一のファイルのバイナリデータを返します。
         * @summary ファイルダウンロード
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesControllerDownload(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling filesControllerDownload.');
            }
            const localVarPath = `/api/v1/files/{id}/download`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * (非推奨) ユーザー、クライアント情報を記載したCSVファイルを実行し、新規アカウントを作成します。
         * @summary CSVファイル実行
         * @param {CreateDidDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesControllerExecuteCSV(body: CreateDidDto, id: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling filesControllerExecuteCSV.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling filesControllerExecuteCSV.');
            }
            const localVarPath = `/api/v1/files/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CreateDidDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ファイルを一覧として値を返します。
         * @summary ファイル一覧取得
         * @param {number} [page] (必須) ページネーションを表示する際のページ数に当たるクエリパラメーター。全件取得する際は1を指定。(デフォルト: 1)
         * @param {number} [limit] (必須) ページネーションを表示する際のページ数あたりに表示する件数を指定するクエリパラメーター。全件取得する際は0を指定。(デフォルト: 10)
         * @param {string} [filename] (任意) 例: \&quot;file-1732019975229-394515535.png\&quot;
         * @param {string} [originalname] (任意) 例: \&quot;english-badge.png\&quot;
         * @param {boolean} [executed] (任意) 例: true
         * @param {string} [type] (任意) 例: \&quot;image/png\&quot;
         * @param {number} [status] (任意) 例: 0
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesControllerFindAll(page?: number, limit?: number, filename?: string, originalname?: string, executed?: boolean, type?: string, status?: number, options: any = {}): FetchArgs {
            const localVarPath = `/api/v1/files`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (filename !== undefined) {
                localVarQueryParameter['filename'] = filename;
            }

            if (originalname !== undefined) {
                localVarQueryParameter['originalname'] = originalname;
            }

            if (executed !== undefined) {
                localVarQueryParameter['executed'] = executed;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * リクエストパラメータのidで指定された単一のファイルの詳細情報の値を返します。
         * @summary ファイル詳細取得
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesControllerFindOne(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling filesControllerFindOne.');
            }
            const localVarPath = `/api/v1/files/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * リクエストパラメータのidで指定された単一のファイルを削除します。
         * @summary ファイル削除
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesControllerRemove(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling filesControllerRemove.');
            }
            const localVarPath = `/api/v1/files/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 新規ファイルアップロードを作成します。
         * @summary ファイルアップロード
         * @param {Blob} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesControllerUploadFile(file: Blob, options: any = {}): FetchArgs {
            // verify required parameter 'file' is not null or undefined
            if (file === null || file === undefined) {
                throw new RequiredError('file','Required parameter file was null or undefined when calling filesControllerUploadFile.');
            }
            const localVarPath = `/api/v1/files`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication bearer required

            if (file !== undefined) {
                localVarFormParams.set('file', file as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FilesApi - functional programming interface
 * @export
 */
export const FilesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * リクエストパラメータのidで指定された単一のファイルのバイナリデータを返します。
         * @summary ファイルダウンロード
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesControllerDownload(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Blob> {
            const localVarFetchArgs = FilesApiFetchParamCreator(configuration).filesControllerDownload(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * (非推奨) ユーザー、クライアント情報を記載したCSVファイルを実行し、新規アカウントを作成します。
         * @summary CSVファイル実行
         * @param {CreateDidDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesControllerExecuteCSV(body: CreateDidDto, id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = FilesApiFetchParamCreator(configuration).filesControllerExecuteCSV(body, id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * ファイルを一覧として値を返します。
         * @summary ファイル一覧取得
         * @param {number} [page] (必須) ページネーションを表示する際のページ数に当たるクエリパラメーター。全件取得する際は1を指定。(デフォルト: 1)
         * @param {number} [limit] (必須) ページネーションを表示する際のページ数あたりに表示する件数を指定するクエリパラメーター。全件取得する際は0を指定。(デフォルト: 10)
         * @param {string} [filename] (任意) 例: \&quot;file-1732019975229-394515535.png\&quot;
         * @param {string} [originalname] (任意) 例: \&quot;english-badge.png\&quot;
         * @param {boolean} [executed] (任意) 例: true
         * @param {string} [type] (任意) 例: \&quot;image/png\&quot;
         * @param {number} [status] (任意) 例: 0
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesControllerFindAll(page?: number, limit?: number, filename?: string, originalname?: string, executed?: boolean, type?: string, status?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<FilesResponseDto> {
            const localVarFetchArgs = FilesApiFetchParamCreator(configuration).filesControllerFindAll(page, limit, filename, originalname, executed, type, status, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * リクエストパラメータのidで指定された単一のファイルの詳細情報の値を返します。
         * @summary ファイル詳細取得
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesControllerFindOne(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<FileResponseDto> {
            const localVarFetchArgs = FilesApiFetchParamCreator(configuration).filesControllerFindOne(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * リクエストパラメータのidで指定された単一のファイルを削除します。
         * @summary ファイル削除
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesControllerRemove(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = FilesApiFetchParamCreator(configuration).filesControllerRemove(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 新規ファイルアップロードを作成します。
         * @summary ファイルアップロード
         * @param {Blob} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesControllerUploadFile(file: Blob, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<FileResponseDto> {
            const localVarFetchArgs = FilesApiFetchParamCreator(configuration).filesControllerUploadFile(file, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * FilesApi - factory interface
 * @export
 */
export const FilesApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * リクエストパラメータのidで指定された単一のファイルのバイナリデータを返します。
         * @summary ファイルダウンロード
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesControllerDownload(id: string, options?: any) {
            return FilesApiFp(configuration).filesControllerDownload(id, options)(fetch, basePath);
        },
        /**
         * (非推奨) ユーザー、クライアント情報を記載したCSVファイルを実行し、新規アカウントを作成します。
         * @summary CSVファイル実行
         * @param {CreateDidDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesControllerExecuteCSV(body: CreateDidDto, id: string, options?: any) {
            return FilesApiFp(configuration).filesControllerExecuteCSV(body, id, options)(fetch, basePath);
        },
        /**
         * ファイルを一覧として値を返します。
         * @summary ファイル一覧取得
         * @param {number} [page] (必須) ページネーションを表示する際のページ数に当たるクエリパラメーター。全件取得する際は1を指定。(デフォルト: 1)
         * @param {number} [limit] (必須) ページネーションを表示する際のページ数あたりに表示する件数を指定するクエリパラメーター。全件取得する際は0を指定。(デフォルト: 10)
         * @param {string} [filename] (任意) 例: \&quot;file-1732019975229-394515535.png\&quot;
         * @param {string} [originalname] (任意) 例: \&quot;english-badge.png\&quot;
         * @param {boolean} [executed] (任意) 例: true
         * @param {string} [type] (任意) 例: \&quot;image/png\&quot;
         * @param {number} [status] (任意) 例: 0
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesControllerFindAll(page?: number, limit?: number, filename?: string, originalname?: string, executed?: boolean, type?: string, status?: number, options?: any) {
            return FilesApiFp(configuration).filesControllerFindAll(page, limit, filename, originalname, executed, type, status, options)(fetch, basePath);
        },
        /**
         * リクエストパラメータのidで指定された単一のファイルの詳細情報の値を返します。
         * @summary ファイル詳細取得
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesControllerFindOne(id: string, options?: any) {
            return FilesApiFp(configuration).filesControllerFindOne(id, options)(fetch, basePath);
        },
        /**
         * リクエストパラメータのidで指定された単一のファイルを削除します。
         * @summary ファイル削除
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesControllerRemove(id: string, options?: any) {
            return FilesApiFp(configuration).filesControllerRemove(id, options)(fetch, basePath);
        },
        /**
         * 新規ファイルアップロードを作成します。
         * @summary ファイルアップロード
         * @param {Blob} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesControllerUploadFile(file: Blob, options?: any) {
            return FilesApiFp(configuration).filesControllerUploadFile(file, options)(fetch, basePath);
        },
    };
};

/**
 * FilesApi - object-oriented interface
 * @export
 * @class FilesApi
 * @extends {BaseAPI}
 */
export class FilesApi extends BaseAPI {
    /**
     * リクエストパラメータのidで指定された単一のファイルのバイナリデータを返します。
     * @summary ファイルダウンロード
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    public filesControllerDownload(id: string, options?: any) {
        return FilesApiFp(this.configuration).filesControllerDownload(id, options)(this.fetch, this.basePath);
    }

    /**
     * (非推奨) ユーザー、クライアント情報を記載したCSVファイルを実行し、新規アカウントを作成します。
     * @summary CSVファイル実行
     * @param {CreateDidDto} body 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    public filesControllerExecuteCSV(body: CreateDidDto, id: string, options?: any) {
        return FilesApiFp(this.configuration).filesControllerExecuteCSV(body, id, options)(this.fetch, this.basePath);
    }

    /**
     * ファイルを一覧として値を返します。
     * @summary ファイル一覧取得
     * @param {number} [page] (必須) ページネーションを表示する際のページ数に当たるクエリパラメーター。全件取得する際は1を指定。(デフォルト: 1)
     * @param {number} [limit] (必須) ページネーションを表示する際のページ数あたりに表示する件数を指定するクエリパラメーター。全件取得する際は0を指定。(デフォルト: 10)
     * @param {string} [filename] (任意) 例: \&quot;file-1732019975229-394515535.png\&quot;
     * @param {string} [originalname] (任意) 例: \&quot;english-badge.png\&quot;
     * @param {boolean} [executed] (任意) 例: true
     * @param {string} [type] (任意) 例: \&quot;image/png\&quot;
     * @param {number} [status] (任意) 例: 0
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    public filesControllerFindAll(page?: number, limit?: number, filename?: string, originalname?: string, executed?: boolean, type?: string, status?: number, options?: any) {
        return FilesApiFp(this.configuration).filesControllerFindAll(page, limit, filename, originalname, executed, type, status, options)(this.fetch, this.basePath);
    }

    /**
     * リクエストパラメータのidで指定された単一のファイルの詳細情報の値を返します。
     * @summary ファイル詳細取得
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    public filesControllerFindOne(id: string, options?: any) {
        return FilesApiFp(this.configuration).filesControllerFindOne(id, options)(this.fetch, this.basePath);
    }

    /**
     * リクエストパラメータのidで指定された単一のファイルを削除します。
     * @summary ファイル削除
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    public filesControllerRemove(id: string, options?: any) {
        return FilesApiFp(this.configuration).filesControllerRemove(id, options)(this.fetch, this.basePath);
    }

    /**
     * 新規ファイルアップロードを作成します。
     * @summary ファイルアップロード
     * @param {Blob} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    public filesControllerUploadFile(file: Blob, options?: any) {
        return FilesApiFp(this.configuration).filesControllerUploadFile(file, options)(this.fetch, this.basePath);
    }

}
/**
 * GroupsApi - fetch parameter creator
 * @export
 */
export const GroupsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * グループにDID情報を紐付けます。
         * @summary グループへのDID情報紐付け
         * @param {ConnectDidInfosDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsControllerConnectDidInfos(body: ConnectDidInfosDto, id: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling groupsControllerConnectDidInfos.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling groupsControllerConnectDidInfos.');
            }
            const localVarPath = `/api/v1/groups/{id}/did-infos`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ConnectDidInfosDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * グループの所有者、関係者などの管理者としてユーザーアカウントを紐付けます。
         * @summary グループへのユーザーアカウント紐付け
         * @param {ConnectUsersDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsControllerConnectUsers(body: ConnectUsersDto, id: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling groupsControllerConnectUsers.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling groupsControllerConnectUsers.');
            }
            const localVarPath = `/api/v1/groups/{id}/users`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ConnectUsersDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * グループにVC情報を紐付けます。
         * @summary グループへのVC情報紐付け
         * @param {ConnectVcInfosDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsControllerConnectVcInfos(body: ConnectVcInfosDto, id: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling groupsControllerConnectVcInfos.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling groupsControllerConnectVcInfos.');
            }
            const localVarPath = `/api/v1/groups/{id}/vc-infos`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ConnectVcInfosDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * グループにVCスキーマを紐付けます。
         * @summary グループへのVCスキーマ紐付け
         * @param {ConnectVcSchemasDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsControllerConnectVcSchema(body: ConnectVcSchemasDto, id: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling groupsControllerConnectVcSchema.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling groupsControllerConnectVcSchema.');
            }
            const localVarPath = `/api/v1/groups/{id}/vc-schemas`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ConnectVcSchemasDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * グループにVP情報を紐付けます。
         * @summary グループへのVP情報紐付け
         * @param {ConnectVpInfosDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsControllerConnectVpInfos(body: ConnectVpInfosDto, id: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling groupsControllerConnectVpInfos.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling groupsControllerConnectVpInfos.');
            }
            const localVarPath = `/api/v1/groups/{id}/vp-infos`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ConnectVpInfosDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * グループ作成に成功しました。
         * @summary グループ作成
         * @param {CreateGroupDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsControllerCreate(body: CreateGroupDto, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling groupsControllerCreate.');
            }
            const localVarPath = `/api/v1/groups`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CreateGroupDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * グループに紐付いたDID情報の紐付けを解除します。
         * @summary グループのDID情報紐付け解除
         * @param {string} id 
         * @param {string} didInfoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsControllerDisconnectDidInfo(id: string, didInfoId: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling groupsControllerDisconnectDidInfo.');
            }
            // verify required parameter 'didInfoId' is not null or undefined
            if (didInfoId === null || didInfoId === undefined) {
                throw new RequiredError('didInfoId','Required parameter didInfoId was null or undefined when calling groupsControllerDisconnectDidInfo.');
            }
            const localVarPath = `/api/v1/groups/{id}/did-info/{did_info_id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"did_info_id"}}`, encodeURIComponent(String(didInfoId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * グループに紐付いたユーザーアカウントの紐付けを解除します。
         * @summary グループのユーザーアカウント紐付け解除
         * @param {string} id 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsControllerDisconnectUser(id: string, userId: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling groupsControllerDisconnectUser.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling groupsControllerDisconnectUser.');
            }
            const localVarPath = `/api/v1/groups/{id}/user/{user_id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * グループに紐付いたVC情報の紐付けを解除します。
         * @summary グループのVC情報紐付け解除
         * @param {string} id 
         * @param {string} vcInfoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsControllerDisconnectVcInfo(id: string, vcInfoId: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling groupsControllerDisconnectVcInfo.');
            }
            // verify required parameter 'vcInfoId' is not null or undefined
            if (vcInfoId === null || vcInfoId === undefined) {
                throw new RequiredError('vcInfoId','Required parameter vcInfoId was null or undefined when calling groupsControllerDisconnectVcInfo.');
            }
            const localVarPath = `/api/v1/groups/{id}/vc-info/{vc_info_id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"vc_info_id"}}`, encodeURIComponent(String(vcInfoId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * グループに紐付いたVCスキーマの紐付けを解除します。
         * @summary グループのVCスキーマ紐付け解除
         * @param {string} id 
         * @param {string} vcSchemaId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsControllerDisconnectVcSchema(id: string, vcSchemaId: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling groupsControllerDisconnectVcSchema.');
            }
            // verify required parameter 'vcSchemaId' is not null or undefined
            if (vcSchemaId === null || vcSchemaId === undefined) {
                throw new RequiredError('vcSchemaId','Required parameter vcSchemaId was null or undefined when calling groupsControllerDisconnectVcSchema.');
            }
            const localVarPath = `/api/v1/groups/{id}/vc-schema/{vc_schema_id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"vc_schema_id"}}`, encodeURIComponent(String(vcSchemaId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * グループに紐付いたVP情報の紐付けを解除します。
         * @summary グループのVP情報紐付け解除
         * @param {string} id 
         * @param {string} vpInfoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsControllerDisconnectVpInfo(id: string, vpInfoId: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling groupsControllerDisconnectVpInfo.');
            }
            // verify required parameter 'vpInfoId' is not null or undefined
            if (vpInfoId === null || vpInfoId === undefined) {
                throw new RequiredError('vpInfoId','Required parameter vpInfoId was null or undefined when calling groupsControllerDisconnectVpInfo.');
            }
            const localVarPath = `/api/v1/groups/{id}/vp-info/{vp_info_id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"vp_info_id"}}`, encodeURIComponent(String(vpInfoId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * グループを一覧として値を返します。
         * @summary グループ一覧取得
         * @param {number} [page] (必須) ページネーションを表示する際のページ数に当たるクエリパラメーター。全件取得する際は1を指定。(デフォルト: 1)
         * @param {number} [limit] (必須) ページネーションを表示する際のページ数あたりに表示する件数を指定するクエリパラメーター。全件取得する際は0を指定。(デフォルト: 10)
         * @param {string} [name] (任意)グループの名前。 例: \&quot;Group Project1\&quot;
         * @param {string} [status] (任意)グループのステータス。 例: \&quot;active\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsControllerFindAll(page?: number, limit?: number, name?: string, status?: string, options: any = {}): FetchArgs {
            const localVarPath = `/api/v1/groups`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * リクエストパラメータのidで指定された単一の管理者アカウントの詳細情報の値を返します。
         * @summary グループ詳細取得
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsControllerFindOne(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling groupsControllerFindOne.');
            }
            const localVarPath = `/api/v1/groups/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * リクエストパラメータのidで指定された単一のグループを停止します。
         * @summary グループ停止
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsControllerRemove(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling groupsControllerRemove.');
            }
            const localVarPath = `/api/v1/groups/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * リクエストパラメータのidで指定された単一のグループ情報を更新します。
         * @summary グループ更新
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsControllerUpdate(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling groupsControllerUpdate.');
            }
            const localVarPath = `/api/v1/groups/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GroupsApi - functional programming interface
 * @export
 */
export const GroupsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * グループにDID情報を紐付けます。
         * @summary グループへのDID情報紐付け
         * @param {ConnectDidInfosDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsControllerConnectDidInfos(body: ConnectDidInfosDto, id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GroupResponseDto> {
            const localVarFetchArgs = GroupsApiFetchParamCreator(configuration).groupsControllerConnectDidInfos(body, id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * グループの所有者、関係者などの管理者としてユーザーアカウントを紐付けます。
         * @summary グループへのユーザーアカウント紐付け
         * @param {ConnectUsersDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsControllerConnectUsers(body: ConnectUsersDto, id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GroupResponseDto> {
            const localVarFetchArgs = GroupsApiFetchParamCreator(configuration).groupsControllerConnectUsers(body, id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * グループにVC情報を紐付けます。
         * @summary グループへのVC情報紐付け
         * @param {ConnectVcInfosDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsControllerConnectVcInfos(body: ConnectVcInfosDto, id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GroupResponseDto> {
            const localVarFetchArgs = GroupsApiFetchParamCreator(configuration).groupsControllerConnectVcInfos(body, id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * グループにVCスキーマを紐付けます。
         * @summary グループへのVCスキーマ紐付け
         * @param {ConnectVcSchemasDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsControllerConnectVcSchema(body: ConnectVcSchemasDto, id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GroupResponseDto> {
            const localVarFetchArgs = GroupsApiFetchParamCreator(configuration).groupsControllerConnectVcSchema(body, id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * グループにVP情報を紐付けます。
         * @summary グループへのVP情報紐付け
         * @param {ConnectVpInfosDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsControllerConnectVpInfos(body: ConnectVpInfosDto, id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GroupResponseDto> {
            const localVarFetchArgs = GroupsApiFetchParamCreator(configuration).groupsControllerConnectVpInfos(body, id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * グループ作成に成功しました。
         * @summary グループ作成
         * @param {CreateGroupDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsControllerCreate(body: CreateGroupDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GroupResponseDto> {
            const localVarFetchArgs = GroupsApiFetchParamCreator(configuration).groupsControllerCreate(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * グループに紐付いたDID情報の紐付けを解除します。
         * @summary グループのDID情報紐付け解除
         * @param {string} id 
         * @param {string} didInfoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsControllerDisconnectDidInfo(id: string, didInfoId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GroupResponseDto> {
            const localVarFetchArgs = GroupsApiFetchParamCreator(configuration).groupsControllerDisconnectDidInfo(id, didInfoId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * グループに紐付いたユーザーアカウントの紐付けを解除します。
         * @summary グループのユーザーアカウント紐付け解除
         * @param {string} id 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsControllerDisconnectUser(id: string, userId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GroupResponseDto> {
            const localVarFetchArgs = GroupsApiFetchParamCreator(configuration).groupsControllerDisconnectUser(id, userId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * グループに紐付いたVC情報の紐付けを解除します。
         * @summary グループのVC情報紐付け解除
         * @param {string} id 
         * @param {string} vcInfoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsControllerDisconnectVcInfo(id: string, vcInfoId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GroupResponseDto> {
            const localVarFetchArgs = GroupsApiFetchParamCreator(configuration).groupsControllerDisconnectVcInfo(id, vcInfoId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * グループに紐付いたVCスキーマの紐付けを解除します。
         * @summary グループのVCスキーマ紐付け解除
         * @param {string} id 
         * @param {string} vcSchemaId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsControllerDisconnectVcSchema(id: string, vcSchemaId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GroupResponseDto> {
            const localVarFetchArgs = GroupsApiFetchParamCreator(configuration).groupsControllerDisconnectVcSchema(id, vcSchemaId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * グループに紐付いたVP情報の紐付けを解除します。
         * @summary グループのVP情報紐付け解除
         * @param {string} id 
         * @param {string} vpInfoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsControllerDisconnectVpInfo(id: string, vpInfoId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GroupResponseDto> {
            const localVarFetchArgs = GroupsApiFetchParamCreator(configuration).groupsControllerDisconnectVpInfo(id, vpInfoId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * グループを一覧として値を返します。
         * @summary グループ一覧取得
         * @param {number} [page] (必須) ページネーションを表示する際のページ数に当たるクエリパラメーター。全件取得する際は1を指定。(デフォルト: 1)
         * @param {number} [limit] (必須) ページネーションを表示する際のページ数あたりに表示する件数を指定するクエリパラメーター。全件取得する際は0を指定。(デフォルト: 10)
         * @param {string} [name] (任意)グループの名前。 例: \&quot;Group Project1\&quot;
         * @param {string} [status] (任意)グループのステータス。 例: \&quot;active\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsControllerFindAll(page?: number, limit?: number, name?: string, status?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GroupsResponseDto> {
            const localVarFetchArgs = GroupsApiFetchParamCreator(configuration).groupsControllerFindAll(page, limit, name, status, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * リクエストパラメータのidで指定された単一の管理者アカウントの詳細情報の値を返します。
         * @summary グループ詳細取得
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsControllerFindOne(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GroupResponseDto> {
            const localVarFetchArgs = GroupsApiFetchParamCreator(configuration).groupsControllerFindOne(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * リクエストパラメータのidで指定された単一のグループを停止します。
         * @summary グループ停止
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsControllerRemove(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = GroupsApiFetchParamCreator(configuration).groupsControllerRemove(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * リクエストパラメータのidで指定された単一のグループ情報を更新します。
         * @summary グループ更新
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsControllerUpdate(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GroupResponseDto> {
            const localVarFetchArgs = GroupsApiFetchParamCreator(configuration).groupsControllerUpdate(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * GroupsApi - factory interface
 * @export
 */
export const GroupsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * グループにDID情報を紐付けます。
         * @summary グループへのDID情報紐付け
         * @param {ConnectDidInfosDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsControllerConnectDidInfos(body: ConnectDidInfosDto, id: string, options?: any) {
            return GroupsApiFp(configuration).groupsControllerConnectDidInfos(body, id, options)(fetch, basePath);
        },
        /**
         * グループの所有者、関係者などの管理者としてユーザーアカウントを紐付けます。
         * @summary グループへのユーザーアカウント紐付け
         * @param {ConnectUsersDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsControllerConnectUsers(body: ConnectUsersDto, id: string, options?: any) {
            return GroupsApiFp(configuration).groupsControllerConnectUsers(body, id, options)(fetch, basePath);
        },
        /**
         * グループにVC情報を紐付けます。
         * @summary グループへのVC情報紐付け
         * @param {ConnectVcInfosDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsControllerConnectVcInfos(body: ConnectVcInfosDto, id: string, options?: any) {
            return GroupsApiFp(configuration).groupsControllerConnectVcInfos(body, id, options)(fetch, basePath);
        },
        /**
         * グループにVCスキーマを紐付けます。
         * @summary グループへのVCスキーマ紐付け
         * @param {ConnectVcSchemasDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsControllerConnectVcSchema(body: ConnectVcSchemasDto, id: string, options?: any) {
            return GroupsApiFp(configuration).groupsControllerConnectVcSchema(body, id, options)(fetch, basePath);
        },
        /**
         * グループにVP情報を紐付けます。
         * @summary グループへのVP情報紐付け
         * @param {ConnectVpInfosDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsControllerConnectVpInfos(body: ConnectVpInfosDto, id: string, options?: any) {
            return GroupsApiFp(configuration).groupsControllerConnectVpInfos(body, id, options)(fetch, basePath);
        },
        /**
         * グループ作成に成功しました。
         * @summary グループ作成
         * @param {CreateGroupDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsControllerCreate(body: CreateGroupDto, options?: any) {
            return GroupsApiFp(configuration).groupsControllerCreate(body, options)(fetch, basePath);
        },
        /**
         * グループに紐付いたDID情報の紐付けを解除します。
         * @summary グループのDID情報紐付け解除
         * @param {string} id 
         * @param {string} didInfoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsControllerDisconnectDidInfo(id: string, didInfoId: string, options?: any) {
            return GroupsApiFp(configuration).groupsControllerDisconnectDidInfo(id, didInfoId, options)(fetch, basePath);
        },
        /**
         * グループに紐付いたユーザーアカウントの紐付けを解除します。
         * @summary グループのユーザーアカウント紐付け解除
         * @param {string} id 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsControllerDisconnectUser(id: string, userId: string, options?: any) {
            return GroupsApiFp(configuration).groupsControllerDisconnectUser(id, userId, options)(fetch, basePath);
        },
        /**
         * グループに紐付いたVC情報の紐付けを解除します。
         * @summary グループのVC情報紐付け解除
         * @param {string} id 
         * @param {string} vcInfoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsControllerDisconnectVcInfo(id: string, vcInfoId: string, options?: any) {
            return GroupsApiFp(configuration).groupsControllerDisconnectVcInfo(id, vcInfoId, options)(fetch, basePath);
        },
        /**
         * グループに紐付いたVCスキーマの紐付けを解除します。
         * @summary グループのVCスキーマ紐付け解除
         * @param {string} id 
         * @param {string} vcSchemaId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsControllerDisconnectVcSchema(id: string, vcSchemaId: string, options?: any) {
            return GroupsApiFp(configuration).groupsControllerDisconnectVcSchema(id, vcSchemaId, options)(fetch, basePath);
        },
        /**
         * グループに紐付いたVP情報の紐付けを解除します。
         * @summary グループのVP情報紐付け解除
         * @param {string} id 
         * @param {string} vpInfoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsControllerDisconnectVpInfo(id: string, vpInfoId: string, options?: any) {
            return GroupsApiFp(configuration).groupsControllerDisconnectVpInfo(id, vpInfoId, options)(fetch, basePath);
        },
        /**
         * グループを一覧として値を返します。
         * @summary グループ一覧取得
         * @param {number} [page] (必須) ページネーションを表示する際のページ数に当たるクエリパラメーター。全件取得する際は1を指定。(デフォルト: 1)
         * @param {number} [limit] (必須) ページネーションを表示する際のページ数あたりに表示する件数を指定するクエリパラメーター。全件取得する際は0を指定。(デフォルト: 10)
         * @param {string} [name] (任意)グループの名前。 例: \&quot;Group Project1\&quot;
         * @param {string} [status] (任意)グループのステータス。 例: \&quot;active\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsControllerFindAll(page?: number, limit?: number, name?: string, status?: string, options?: any) {
            return GroupsApiFp(configuration).groupsControllerFindAll(page, limit, name, status, options)(fetch, basePath);
        },
        /**
         * リクエストパラメータのidで指定された単一の管理者アカウントの詳細情報の値を返します。
         * @summary グループ詳細取得
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsControllerFindOne(id: string, options?: any) {
            return GroupsApiFp(configuration).groupsControllerFindOne(id, options)(fetch, basePath);
        },
        /**
         * リクエストパラメータのidで指定された単一のグループを停止します。
         * @summary グループ停止
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsControllerRemove(id: string, options?: any) {
            return GroupsApiFp(configuration).groupsControllerRemove(id, options)(fetch, basePath);
        },
        /**
         * リクエストパラメータのidで指定された単一のグループ情報を更新します。
         * @summary グループ更新
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsControllerUpdate(id: string, options?: any) {
            return GroupsApiFp(configuration).groupsControllerUpdate(id, options)(fetch, basePath);
        },
    };
};

/**
 * GroupsApi - object-oriented interface
 * @export
 * @class GroupsApi
 * @extends {BaseAPI}
 */
export class GroupsApi extends BaseAPI {
    /**
     * グループにDID情報を紐付けます。
     * @summary グループへのDID情報紐付け
     * @param {ConnectDidInfosDto} body 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public groupsControllerConnectDidInfos(body: ConnectDidInfosDto, id: string, options?: any) {
        return GroupsApiFp(this.configuration).groupsControllerConnectDidInfos(body, id, options)(this.fetch, this.basePath);
    }

    /**
     * グループの所有者、関係者などの管理者としてユーザーアカウントを紐付けます。
     * @summary グループへのユーザーアカウント紐付け
     * @param {ConnectUsersDto} body 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public groupsControllerConnectUsers(body: ConnectUsersDto, id: string, options?: any) {
        return GroupsApiFp(this.configuration).groupsControllerConnectUsers(body, id, options)(this.fetch, this.basePath);
    }

    /**
     * グループにVC情報を紐付けます。
     * @summary グループへのVC情報紐付け
     * @param {ConnectVcInfosDto} body 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public groupsControllerConnectVcInfos(body: ConnectVcInfosDto, id: string, options?: any) {
        return GroupsApiFp(this.configuration).groupsControllerConnectVcInfos(body, id, options)(this.fetch, this.basePath);
    }

    /**
     * グループにVCスキーマを紐付けます。
     * @summary グループへのVCスキーマ紐付け
     * @param {ConnectVcSchemasDto} body 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public groupsControllerConnectVcSchema(body: ConnectVcSchemasDto, id: string, options?: any) {
        return GroupsApiFp(this.configuration).groupsControllerConnectVcSchema(body, id, options)(this.fetch, this.basePath);
    }

    /**
     * グループにVP情報を紐付けます。
     * @summary グループへのVP情報紐付け
     * @param {ConnectVpInfosDto} body 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public groupsControllerConnectVpInfos(body: ConnectVpInfosDto, id: string, options?: any) {
        return GroupsApiFp(this.configuration).groupsControllerConnectVpInfos(body, id, options)(this.fetch, this.basePath);
    }

    /**
     * グループ作成に成功しました。
     * @summary グループ作成
     * @param {CreateGroupDto} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public groupsControllerCreate(body: CreateGroupDto, options?: any) {
        return GroupsApiFp(this.configuration).groupsControllerCreate(body, options)(this.fetch, this.basePath);
    }

    /**
     * グループに紐付いたDID情報の紐付けを解除します。
     * @summary グループのDID情報紐付け解除
     * @param {string} id 
     * @param {string} didInfoId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public groupsControllerDisconnectDidInfo(id: string, didInfoId: string, options?: any) {
        return GroupsApiFp(this.configuration).groupsControllerDisconnectDidInfo(id, didInfoId, options)(this.fetch, this.basePath);
    }

    /**
     * グループに紐付いたユーザーアカウントの紐付けを解除します。
     * @summary グループのユーザーアカウント紐付け解除
     * @param {string} id 
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public groupsControllerDisconnectUser(id: string, userId: string, options?: any) {
        return GroupsApiFp(this.configuration).groupsControllerDisconnectUser(id, userId, options)(this.fetch, this.basePath);
    }

    /**
     * グループに紐付いたVC情報の紐付けを解除します。
     * @summary グループのVC情報紐付け解除
     * @param {string} id 
     * @param {string} vcInfoId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public groupsControllerDisconnectVcInfo(id: string, vcInfoId: string, options?: any) {
        return GroupsApiFp(this.configuration).groupsControllerDisconnectVcInfo(id, vcInfoId, options)(this.fetch, this.basePath);
    }

    /**
     * グループに紐付いたVCスキーマの紐付けを解除します。
     * @summary グループのVCスキーマ紐付け解除
     * @param {string} id 
     * @param {string} vcSchemaId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public groupsControllerDisconnectVcSchema(id: string, vcSchemaId: string, options?: any) {
        return GroupsApiFp(this.configuration).groupsControllerDisconnectVcSchema(id, vcSchemaId, options)(this.fetch, this.basePath);
    }

    /**
     * グループに紐付いたVP情報の紐付けを解除します。
     * @summary グループのVP情報紐付け解除
     * @param {string} id 
     * @param {string} vpInfoId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public groupsControllerDisconnectVpInfo(id: string, vpInfoId: string, options?: any) {
        return GroupsApiFp(this.configuration).groupsControllerDisconnectVpInfo(id, vpInfoId, options)(this.fetch, this.basePath);
    }

    /**
     * グループを一覧として値を返します。
     * @summary グループ一覧取得
     * @param {number} [page] (必須) ページネーションを表示する際のページ数に当たるクエリパラメーター。全件取得する際は1を指定。(デフォルト: 1)
     * @param {number} [limit] (必須) ページネーションを表示する際のページ数あたりに表示する件数を指定するクエリパラメーター。全件取得する際は0を指定。(デフォルト: 10)
     * @param {string} [name] (任意)グループの名前。 例: \&quot;Group Project1\&quot;
     * @param {string} [status] (任意)グループのステータス。 例: \&quot;active\&quot;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public groupsControllerFindAll(page?: number, limit?: number, name?: string, status?: string, options?: any) {
        return GroupsApiFp(this.configuration).groupsControllerFindAll(page, limit, name, status, options)(this.fetch, this.basePath);
    }

    /**
     * リクエストパラメータのidで指定された単一の管理者アカウントの詳細情報の値を返します。
     * @summary グループ詳細取得
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public groupsControllerFindOne(id: string, options?: any) {
        return GroupsApiFp(this.configuration).groupsControllerFindOne(id, options)(this.fetch, this.basePath);
    }

    /**
     * リクエストパラメータのidで指定された単一のグループを停止します。
     * @summary グループ停止
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public groupsControllerRemove(id: string, options?: any) {
        return GroupsApiFp(this.configuration).groupsControllerRemove(id, options)(this.fetch, this.basePath);
    }

    /**
     * リクエストパラメータのidで指定された単一のグループ情報を更新します。
     * @summary グループ更新
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public groupsControllerUpdate(id: string, options?: any) {
        return GroupsApiFp(this.configuration).groupsControllerUpdate(id, options)(this.fetch, this.basePath);
    }

}
/**
 * HealthApi - fetch parameter creator
 * @export
 */
export const HealthApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * ヘルスチェック
         * @summary ヘルスチェック
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerHealth(options: any = {}): FetchArgs {
            const localVarPath = `/api/v1/health`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HealthApi - functional programming interface
 * @export
 */
export const HealthApiFp = function(configuration?: Configuration) {
    return {
        /**
         * ヘルスチェック
         * @summary ヘルスチェック
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerHealth(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = HealthApiFetchParamCreator(configuration).appControllerHealth(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * HealthApi - factory interface
 * @export
 */
export const HealthApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * ヘルスチェック
         * @summary ヘルスチェック
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerHealth(options?: any) {
            return HealthApiFp(configuration).appControllerHealth(options)(fetch, basePath);
        },
    };
};

/**
 * HealthApi - object-oriented interface
 * @export
 * @class HealthApi
 * @extends {BaseAPI}
 */
export class HealthApi extends BaseAPI {
    /**
     * ヘルスチェック
     * @summary ヘルスチェック
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthApi
     */
    public appControllerHealth(options?: any) {
        return HealthApiFp(this.configuration).appControllerHealth(options)(this.fetch, this.basePath);
    }

}
/**
 * MailsApi - fetch parameter creator
 * @export
 */
export const MailsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 送信済みメールを一覧として値を返します。
         * @summary 送信済みメール一覧取得
         * @param {number} [page] (必須) ページネーションを表示する際のページ数に当たるクエリパラメーター。全件取得する際は1を指定。(デフォルト: 1)
         * @param {number} [limit] (必須) ページネーションを表示する際のページ数あたりに表示する件数を指定するクエリパラメーター。全件取得する際は0を指定。(デフォルト: 10)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mailsControllerFindAll(page?: number, limit?: number, options: any = {}): FetchArgs {
            const localVarPath = `/api/v1/mails`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * リクエストパラメータのidで指定された単一の送信済みメールの詳細情報の値を返します。
         * @summary 送信済みメール詳細取得
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mailsControllerFindOne(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling mailsControllerFindOne.');
            }
            const localVarPath = `/api/v1/mails/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 新規単一メールを作成し、送信します。
         * @summary 新規単一メール送信
         * @param {SendMailDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mailsControllerSend(body: SendMailDto, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling mailsControllerSend.');
            }
            const localVarPath = `/api/v1/mails`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"SendMailDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 新規メールを複数作成し、送信します。
         * @summary 新規複数メールバッチ送信
         * @param {SendMailBatchDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mailsControllerSendBatch(body: SendMailBatchDto, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling mailsControllerSendBatch.');
            }
            const localVarPath = `/api/v1/mails/batch`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"SendMailBatchDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MailsApi - functional programming interface
 * @export
 */
export const MailsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 送信済みメールを一覧として値を返します。
         * @summary 送信済みメール一覧取得
         * @param {number} [page] (必須) ページネーションを表示する際のページ数に当たるクエリパラメーター。全件取得する際は1を指定。(デフォルト: 1)
         * @param {number} [limit] (必須) ページネーションを表示する際のページ数あたりに表示する件数を指定するクエリパラメーター。全件取得する際は0を指定。(デフォルト: 10)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mailsControllerFindAll(page?: number, limit?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<MailsResponseDto> {
            const localVarFetchArgs = MailsApiFetchParamCreator(configuration).mailsControllerFindAll(page, limit, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * リクエストパラメータのidで指定された単一の送信済みメールの詳細情報の値を返します。
         * @summary 送信済みメール詳細取得
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mailsControllerFindOne(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Mail> {
            const localVarFetchArgs = MailsApiFetchParamCreator(configuration).mailsControllerFindOne(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 新規単一メールを作成し、送信します。
         * @summary 新規単一メール送信
         * @param {SendMailDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mailsControllerSend(body: SendMailDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = MailsApiFetchParamCreator(configuration).mailsControllerSend(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 新規メールを複数作成し、送信します。
         * @summary 新規複数メールバッチ送信
         * @param {SendMailBatchDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mailsControllerSendBatch(body: SendMailBatchDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = MailsApiFetchParamCreator(configuration).mailsControllerSendBatch(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * MailsApi - factory interface
 * @export
 */
export const MailsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 送信済みメールを一覧として値を返します。
         * @summary 送信済みメール一覧取得
         * @param {number} [page] (必須) ページネーションを表示する際のページ数に当たるクエリパラメーター。全件取得する際は1を指定。(デフォルト: 1)
         * @param {number} [limit] (必須) ページネーションを表示する際のページ数あたりに表示する件数を指定するクエリパラメーター。全件取得する際は0を指定。(デフォルト: 10)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mailsControllerFindAll(page?: number, limit?: number, options?: any) {
            return MailsApiFp(configuration).mailsControllerFindAll(page, limit, options)(fetch, basePath);
        },
        /**
         * リクエストパラメータのidで指定された単一の送信済みメールの詳細情報の値を返します。
         * @summary 送信済みメール詳細取得
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mailsControllerFindOne(id: string, options?: any) {
            return MailsApiFp(configuration).mailsControllerFindOne(id, options)(fetch, basePath);
        },
        /**
         * 新規単一メールを作成し、送信します。
         * @summary 新規単一メール送信
         * @param {SendMailDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mailsControllerSend(body: SendMailDto, options?: any) {
            return MailsApiFp(configuration).mailsControllerSend(body, options)(fetch, basePath);
        },
        /**
         * 新規メールを複数作成し、送信します。
         * @summary 新規複数メールバッチ送信
         * @param {SendMailBatchDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mailsControllerSendBatch(body: SendMailBatchDto, options?: any) {
            return MailsApiFp(configuration).mailsControllerSendBatch(body, options)(fetch, basePath);
        },
    };
};

/**
 * MailsApi - object-oriented interface
 * @export
 * @class MailsApi
 * @extends {BaseAPI}
 */
export class MailsApi extends BaseAPI {
    /**
     * 送信済みメールを一覧として値を返します。
     * @summary 送信済みメール一覧取得
     * @param {number} [page] (必須) ページネーションを表示する際のページ数に当たるクエリパラメーター。全件取得する際は1を指定。(デフォルト: 1)
     * @param {number} [limit] (必須) ページネーションを表示する際のページ数あたりに表示する件数を指定するクエリパラメーター。全件取得する際は0を指定。(デフォルト: 10)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MailsApi
     */
    public mailsControllerFindAll(page?: number, limit?: number, options?: any) {
        return MailsApiFp(this.configuration).mailsControllerFindAll(page, limit, options)(this.fetch, this.basePath);
    }

    /**
     * リクエストパラメータのidで指定された単一の送信済みメールの詳細情報の値を返します。
     * @summary 送信済みメール詳細取得
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MailsApi
     */
    public mailsControllerFindOne(id: string, options?: any) {
        return MailsApiFp(this.configuration).mailsControllerFindOne(id, options)(this.fetch, this.basePath);
    }

    /**
     * 新規単一メールを作成し、送信します。
     * @summary 新規単一メール送信
     * @param {SendMailDto} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MailsApi
     */
    public mailsControllerSend(body: SendMailDto, options?: any) {
        return MailsApiFp(this.configuration).mailsControllerSend(body, options)(this.fetch, this.basePath);
    }

    /**
     * 新規メールを複数作成し、送信します。
     * @summary 新規複数メールバッチ送信
     * @param {SendMailBatchDto} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MailsApi
     */
    public mailsControllerSendBatch(body: SendMailBatchDto, options?: any) {
        return MailsApiFp(this.configuration).mailsControllerSendBatch(body, options)(this.fetch, this.basePath);
    }

}
/**
 * SettingsApi - fetch parameter creator
 * @export
 */
export const SettingsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get all admins
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsControllerFindAll(options: any = {}): FetchArgs {
            const localVarPath = `/api/v1/settings`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a specific admin
         * @param {string} key 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsControllerFindOne(key: string, options: any = {}): FetchArgs {
            // verify required parameter 'key' is not null or undefined
            if (key === null || key === undefined) {
                throw new RequiredError('key','Required parameter key was null or undefined when calling settingsControllerFindOne.');
            }
            const localVarPath = `/api/v1/settings/{key}`
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SettingsApi - functional programming interface
 * @export
 */
export const SettingsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get all admins
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsControllerFindAll(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<SettingListResponseDto> {
            const localVarFetchArgs = SettingsApiFetchParamCreator(configuration).settingsControllerFindAll(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get a specific admin
         * @param {string} key 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsControllerFindOne(key: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<SettingResponseDto> {
            const localVarFetchArgs = SettingsApiFetchParamCreator(configuration).settingsControllerFindOne(key, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * SettingsApi - factory interface
 * @export
 */
export const SettingsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Get all admins
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsControllerFindAll(options?: any) {
            return SettingsApiFp(configuration).settingsControllerFindAll(options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get a specific admin
         * @param {string} key 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsControllerFindOne(key: string, options?: any) {
            return SettingsApiFp(configuration).settingsControllerFindOne(key, options)(fetch, basePath);
        },
    };
};

/**
 * SettingsApi - object-oriented interface
 * @export
 * @class SettingsApi
 * @extends {BaseAPI}
 */
export class SettingsApi extends BaseAPI {
    /**
     * 
     * @summary Get all admins
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public settingsControllerFindAll(options?: any) {
        return SettingsApiFp(this.configuration).settingsControllerFindAll(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get a specific admin
     * @param {string} key 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public settingsControllerFindOne(key: string, options?: any) {
        return SettingsApiFp(this.configuration).settingsControllerFindOne(key, options)(this.fetch, this.basePath);
    }

}
/**
 * UsersApi - fetch parameter creator
 * @export
 */
export const UsersApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 新規ユーザーアカウントを作成します。
         * @summary ユーザーアカウント作成
         * @param {CreateUserDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerCreate(body: CreateUserDto, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling usersControllerCreate.');
            }
            const localVarPath = `/api/v1/users`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CreateUserDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * クライアントアカウントに紐付いたDIDの鍵情報をメールで送信し、共有します。
         * @summary アカウントへの鍵のメール送信
         * @param {string} id 
         * @param {string} keyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerExportKey(id: string, keyId: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling usersControllerExportKey.');
            }
            // verify required parameter 'keyId' is not null or undefined
            if (keyId === null || keyId === undefined) {
                throw new RequiredError('keyId','Required parameter keyId was null or undefined when calling usersControllerExportKey.');
            }
            const localVarPath = `/api/v1/users/{id}/keys/{keyId}/mail`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"keyId"}}`, encodeURIComponent(String(keyId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ユーザーアカウントを一覧として値を返します。
         * @summary ユーザーアカウント一覧取得
         * @param {number} [page] (必須) ページネーションを表示する際のページ数に当たるクエリパラメーター。全件取得する際は1を指定。(デフォルト: 1)
         * @param {number} [limit] (必須) ページネーションを表示する際のページ数あたりに表示する件数を指定するクエリパラメーター。全件取得する際は0を指定。(デフォルト: 10)
         * @param {string} [name] (任意) 例: \&quot;Jhon Doe\&quot;
         * @param {string} [email] (任意) 例: \&quot;client1@email.com\&quot;
         * @param {string} [status] (任意) 例: \&quot;active\&quot;
         * @param {string} [role] (任意) 例: \&quot;client\&quot;
         * @param {boolean} [needActivateFlow] (任意) 例: true, false
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerFindAll(page?: number, limit?: number, name?: string, email?: string, status?: string, role?: string, needActivateFlow?: boolean, options: any = {}): FetchArgs {
            const localVarPath = `/api/v1/users`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (role !== undefined) {
                localVarQueryParameter['role'] = role;
            }

            if (needActivateFlow !== undefined) {
                localVarQueryParameter['needActivateFlow'] = needActivateFlow;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * リクエストパラメータのidで指定された単一の管理者アカウントの詳細情報の値を返します。
         * @summary ユーザーアカウント詳細取得
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerFindOne(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling usersControllerFindOne.');
            }
            const localVarPath = `/api/v1/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ユーザーアカウントへのアカウント有効化メール送信
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerInvite(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling usersControllerInvite.');
            }
            const localVarPath = `/api/v1/users/{id}/invite`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the count of clients
         * @param {GenerateDidDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerRegisterUserDid(body: GenerateDidDto, id: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling usersControllerRegisterUserDid.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling usersControllerRegisterUserDid.');
            }
            const localVarPath = `/api/v1/users/{id}/dids`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"GenerateDidDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ユーザーアカウントへのアカウント有効化、登録フロー
         * @param {RegistrationProcessDto} body 
         * @param {string} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerRegistration(body: RegistrationProcessDto, token: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling usersControllerRegistration.');
            }
            // verify required parameter 'token' is not null or undefined
            if (token === null || token === undefined) {
                throw new RequiredError('token','Required parameter token was null or undefined when calling usersControllerRegistration.');
            }
            const localVarPath = `/api/v1/users/registration`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"RegistrationProcessDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * リクエストパラメータのidで指定された単一のユーザーアカウントを停止します。
         * @summary ユーザーアカウント停止
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerRemove(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling usersControllerRemove.');
            }
            const localVarPath = `/api/v1/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * アカウントに紐付いたDIDをメールで送信し、共有します。
         * @summary アカウントへのDIDのメール送信
         * @param {string} id 
         * @param {string} didInfoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerSendDid(id: string, didInfoId: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling usersControllerSendDid.');
            }
            // verify required parameter 'didInfoId' is not null or undefined
            if (didInfoId === null || didInfoId === undefined) {
                throw new RequiredError('didInfoId','Required parameter didInfoId was null or undefined when calling usersControllerSendDid.');
            }
            const localVarPath = `/api/v1/users/{id}/dids/{didInfoId}/mail`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"didInfoId"}}`, encodeURIComponent(String(didInfoId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * アカウントに紐付いたDIDをメールで送信し、共有します。
         * @summary アカウントへのDIDのメール送信
         * @param {string} id 
         * @param {string} didInfoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerSendKey(id: string, didInfoId: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling usersControllerSendKey.');
            }
            // verify required parameter 'didInfoId' is not null or undefined
            if (didInfoId === null || didInfoId === undefined) {
                throw new RequiredError('didInfoId','Required parameter didInfoId was null or undefined when calling usersControllerSendKey.');
            }
            const localVarPath = `/api/v1/users/{id}/keys/{didInfoId}/mail`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"didInfoId"}}`, encodeURIComponent(String(didInfoId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * アカウントに紐付いたVCをメールで送信し、共有します。
         * @summary アカウントへのVCのメール送信
         * @param {string} id 
         * @param {string} vcInfoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerSendVc(id: string, vcInfoId: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling usersControllerSendVc.');
            }
            // verify required parameter 'vcInfoId' is not null or undefined
            if (vcInfoId === null || vcInfoId === undefined) {
                throw new RequiredError('vcInfoId','Required parameter vcInfoId was null or undefined when calling usersControllerSendVc.');
            }
            const localVarPath = `/api/v1/users/{id}/vcs/{vcInfoId}/mail`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"vcInfoId"}}`, encodeURIComponent(String(vcInfoId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * リクエストパラメータのidで指定された単一のユーザーアカウント情報を更新します。
         * @summary ユーザーアカウント更新
         * @param {CreateUserDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerUpdate(body: CreateUserDto, id: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling usersControllerUpdate.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling usersControllerUpdate.');
            }
            const localVarPath = `/api/v1/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CreateUserDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 新規ユーザーアカウントを作成します。
         * @summary ユーザーアカウント作成
         * @param {CreateUserDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerCreate(body: CreateUserDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UserResponseDto> {
            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).usersControllerCreate(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * クライアントアカウントに紐付いたDIDの鍵情報をメールで送信し、共有します。
         * @summary アカウントへの鍵のメール送信
         * @param {string} id 
         * @param {string} keyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerExportKey(id: string, keyId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).usersControllerExportKey(id, keyId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * ユーザーアカウントを一覧として値を返します。
         * @summary ユーザーアカウント一覧取得
         * @param {number} [page] (必須) ページネーションを表示する際のページ数に当たるクエリパラメーター。全件取得する際は1を指定。(デフォルト: 1)
         * @param {number} [limit] (必須) ページネーションを表示する際のページ数あたりに表示する件数を指定するクエリパラメーター。全件取得する際は0を指定。(デフォルト: 10)
         * @param {string} [name] (任意) 例: \&quot;Jhon Doe\&quot;
         * @param {string} [email] (任意) 例: \&quot;client1@email.com\&quot;
         * @param {string} [status] (任意) 例: \&quot;active\&quot;
         * @param {string} [role] (任意) 例: \&quot;client\&quot;
         * @param {boolean} [needActivateFlow] (任意) 例: true, false
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerFindAll(page?: number, limit?: number, name?: string, email?: string, status?: string, role?: string, needActivateFlow?: boolean, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UsersResponseDto> {
            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).usersControllerFindAll(page, limit, name, email, status, role, needActivateFlow, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * リクエストパラメータのidで指定された単一の管理者アカウントの詳細情報の値を返します。
         * @summary ユーザーアカウント詳細取得
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerFindOne(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UserResponseDto> {
            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).usersControllerFindOne(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary ユーザーアカウントへのアカウント有効化メール送信
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerInvite(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).usersControllerInvite(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get the count of clients
         * @param {GenerateDidDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerRegisterUserDid(body: GenerateDidDto, id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).usersControllerRegisterUserDid(body, id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary ユーザーアカウントへのアカウント有効化、登録フロー
         * @param {RegistrationProcessDto} body 
         * @param {string} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerRegistration(body: RegistrationProcessDto, token: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).usersControllerRegistration(body, token, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * リクエストパラメータのidで指定された単一のユーザーアカウントを停止します。
         * @summary ユーザーアカウント停止
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerRemove(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).usersControllerRemove(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * アカウントに紐付いたDIDをメールで送信し、共有します。
         * @summary アカウントへのDIDのメール送信
         * @param {string} id 
         * @param {string} didInfoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerSendDid(id: string, didInfoId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).usersControllerSendDid(id, didInfoId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * アカウントに紐付いたDIDをメールで送信し、共有します。
         * @summary アカウントへのDIDのメール送信
         * @param {string} id 
         * @param {string} didInfoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerSendKey(id: string, didInfoId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).usersControllerSendKey(id, didInfoId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * アカウントに紐付いたVCをメールで送信し、共有します。
         * @summary アカウントへのVCのメール送信
         * @param {string} id 
         * @param {string} vcInfoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerSendVc(id: string, vcInfoId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).usersControllerSendVc(id, vcInfoId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * リクエストパラメータのidで指定された単一のユーザーアカウント情報を更新します。
         * @summary ユーザーアカウント更新
         * @param {CreateUserDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerUpdate(body: CreateUserDto, id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UserResponseDto> {
            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).usersControllerUpdate(body, id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 新規ユーザーアカウントを作成します。
         * @summary ユーザーアカウント作成
         * @param {CreateUserDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerCreate(body: CreateUserDto, options?: any) {
            return UsersApiFp(configuration).usersControllerCreate(body, options)(fetch, basePath);
        },
        /**
         * クライアントアカウントに紐付いたDIDの鍵情報をメールで送信し、共有します。
         * @summary アカウントへの鍵のメール送信
         * @param {string} id 
         * @param {string} keyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerExportKey(id: string, keyId: string, options?: any) {
            return UsersApiFp(configuration).usersControllerExportKey(id, keyId, options)(fetch, basePath);
        },
        /**
         * ユーザーアカウントを一覧として値を返します。
         * @summary ユーザーアカウント一覧取得
         * @param {number} [page] (必須) ページネーションを表示する際のページ数に当たるクエリパラメーター。全件取得する際は1を指定。(デフォルト: 1)
         * @param {number} [limit] (必須) ページネーションを表示する際のページ数あたりに表示する件数を指定するクエリパラメーター。全件取得する際は0を指定。(デフォルト: 10)
         * @param {string} [name] (任意) 例: \&quot;Jhon Doe\&quot;
         * @param {string} [email] (任意) 例: \&quot;client1@email.com\&quot;
         * @param {string} [status] (任意) 例: \&quot;active\&quot;
         * @param {string} [role] (任意) 例: \&quot;client\&quot;
         * @param {boolean} [needActivateFlow] (任意) 例: true, false
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerFindAll(page?: number, limit?: number, name?: string, email?: string, status?: string, role?: string, needActivateFlow?: boolean, options?: any) {
            return UsersApiFp(configuration).usersControllerFindAll(page, limit, name, email, status, role, needActivateFlow, options)(fetch, basePath);
        },
        /**
         * リクエストパラメータのidで指定された単一の管理者アカウントの詳細情報の値を返します。
         * @summary ユーザーアカウント詳細取得
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerFindOne(id: string, options?: any) {
            return UsersApiFp(configuration).usersControllerFindOne(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary ユーザーアカウントへのアカウント有効化メール送信
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerInvite(id: string, options?: any) {
            return UsersApiFp(configuration).usersControllerInvite(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get the count of clients
         * @param {GenerateDidDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerRegisterUserDid(body: GenerateDidDto, id: string, options?: any) {
            return UsersApiFp(configuration).usersControllerRegisterUserDid(body, id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary ユーザーアカウントへのアカウント有効化、登録フロー
         * @param {RegistrationProcessDto} body 
         * @param {string} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerRegistration(body: RegistrationProcessDto, token: string, options?: any) {
            return UsersApiFp(configuration).usersControllerRegistration(body, token, options)(fetch, basePath);
        },
        /**
         * リクエストパラメータのidで指定された単一のユーザーアカウントを停止します。
         * @summary ユーザーアカウント停止
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerRemove(id: string, options?: any) {
            return UsersApiFp(configuration).usersControllerRemove(id, options)(fetch, basePath);
        },
        /**
         * アカウントに紐付いたDIDをメールで送信し、共有します。
         * @summary アカウントへのDIDのメール送信
         * @param {string} id 
         * @param {string} didInfoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerSendDid(id: string, didInfoId: string, options?: any) {
            return UsersApiFp(configuration).usersControllerSendDid(id, didInfoId, options)(fetch, basePath);
        },
        /**
         * アカウントに紐付いたDIDをメールで送信し、共有します。
         * @summary アカウントへのDIDのメール送信
         * @param {string} id 
         * @param {string} didInfoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerSendKey(id: string, didInfoId: string, options?: any) {
            return UsersApiFp(configuration).usersControllerSendKey(id, didInfoId, options)(fetch, basePath);
        },
        /**
         * アカウントに紐付いたVCをメールで送信し、共有します。
         * @summary アカウントへのVCのメール送信
         * @param {string} id 
         * @param {string} vcInfoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerSendVc(id: string, vcInfoId: string, options?: any) {
            return UsersApiFp(configuration).usersControllerSendVc(id, vcInfoId, options)(fetch, basePath);
        },
        /**
         * リクエストパラメータのidで指定された単一のユーザーアカウント情報を更新します。
         * @summary ユーザーアカウント更新
         * @param {CreateUserDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerUpdate(body: CreateUserDto, id: string, options?: any) {
            return UsersApiFp(configuration).usersControllerUpdate(body, id, options)(fetch, basePath);
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * 新規ユーザーアカウントを作成します。
     * @summary ユーザーアカウント作成
     * @param {CreateUserDto} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerCreate(body: CreateUserDto, options?: any) {
        return UsersApiFp(this.configuration).usersControllerCreate(body, options)(this.fetch, this.basePath);
    }

    /**
     * クライアントアカウントに紐付いたDIDの鍵情報をメールで送信し、共有します。
     * @summary アカウントへの鍵のメール送信
     * @param {string} id 
     * @param {string} keyId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerExportKey(id: string, keyId: string, options?: any) {
        return UsersApiFp(this.configuration).usersControllerExportKey(id, keyId, options)(this.fetch, this.basePath);
    }

    /**
     * ユーザーアカウントを一覧として値を返します。
     * @summary ユーザーアカウント一覧取得
     * @param {number} [page] (必須) ページネーションを表示する際のページ数に当たるクエリパラメーター。全件取得する際は1を指定。(デフォルト: 1)
     * @param {number} [limit] (必須) ページネーションを表示する際のページ数あたりに表示する件数を指定するクエリパラメーター。全件取得する際は0を指定。(デフォルト: 10)
     * @param {string} [name] (任意) 例: \&quot;Jhon Doe\&quot;
     * @param {string} [email] (任意) 例: \&quot;client1@email.com\&quot;
     * @param {string} [status] (任意) 例: \&quot;active\&quot;
     * @param {string} [role] (任意) 例: \&quot;client\&quot;
     * @param {boolean} [needActivateFlow] (任意) 例: true, false
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerFindAll(page?: number, limit?: number, name?: string, email?: string, status?: string, role?: string, needActivateFlow?: boolean, options?: any) {
        return UsersApiFp(this.configuration).usersControllerFindAll(page, limit, name, email, status, role, needActivateFlow, options)(this.fetch, this.basePath);
    }

    /**
     * リクエストパラメータのidで指定された単一の管理者アカウントの詳細情報の値を返します。
     * @summary ユーザーアカウント詳細取得
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerFindOne(id: string, options?: any) {
        return UsersApiFp(this.configuration).usersControllerFindOne(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary ユーザーアカウントへのアカウント有効化メール送信
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerInvite(id: string, options?: any) {
        return UsersApiFp(this.configuration).usersControllerInvite(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get the count of clients
     * @param {GenerateDidDto} body 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerRegisterUserDid(body: GenerateDidDto, id: string, options?: any) {
        return UsersApiFp(this.configuration).usersControllerRegisterUserDid(body, id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary ユーザーアカウントへのアカウント有効化、登録フロー
     * @param {RegistrationProcessDto} body 
     * @param {string} token 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerRegistration(body: RegistrationProcessDto, token: string, options?: any) {
        return UsersApiFp(this.configuration).usersControllerRegistration(body, token, options)(this.fetch, this.basePath);
    }

    /**
     * リクエストパラメータのidで指定された単一のユーザーアカウントを停止します。
     * @summary ユーザーアカウント停止
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerRemove(id: string, options?: any) {
        return UsersApiFp(this.configuration).usersControllerRemove(id, options)(this.fetch, this.basePath);
    }

    /**
     * アカウントに紐付いたDIDをメールで送信し、共有します。
     * @summary アカウントへのDIDのメール送信
     * @param {string} id 
     * @param {string} didInfoId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerSendDid(id: string, didInfoId: string, options?: any) {
        return UsersApiFp(this.configuration).usersControllerSendDid(id, didInfoId, options)(this.fetch, this.basePath);
    }

    /**
     * アカウントに紐付いたDIDをメールで送信し、共有します。
     * @summary アカウントへのDIDのメール送信
     * @param {string} id 
     * @param {string} didInfoId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerSendKey(id: string, didInfoId: string, options?: any) {
        return UsersApiFp(this.configuration).usersControllerSendKey(id, didInfoId, options)(this.fetch, this.basePath);
    }

    /**
     * アカウントに紐付いたVCをメールで送信し、共有します。
     * @summary アカウントへのVCのメール送信
     * @param {string} id 
     * @param {string} vcInfoId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerSendVc(id: string, vcInfoId: string, options?: any) {
        return UsersApiFp(this.configuration).usersControllerSendVc(id, vcInfoId, options)(this.fetch, this.basePath);
    }

    /**
     * リクエストパラメータのidで指定された単一のユーザーアカウント情報を更新します。
     * @summary ユーザーアカウント更新
     * @param {CreateUserDto} body 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerUpdate(body: CreateUserDto, id: string, options?: any) {
        return UsersApiFp(this.configuration).usersControllerUpdate(body, id, options)(this.fetch, this.basePath);
    }

}
/**
 * VcInfosApi - fetch parameter creator
 * @export
 */
export const VcInfosApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * リクエストパラメータのidで指定された単一のVC情報に対して、任意の管理用ラベルを追加します。
         * @summary VC情報へのラベル追加
         * @param {AddLabelToVcInfoDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vcInfosControllerAddLabel(body: AddLabelToVcInfoDto, id: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling vcInfosControllerAddLabel.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling vcInfosControllerAddLabel.');
            }
            const localVarPath = `/api/v1/vc-infos/{id}/label`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"AddLabelToVcInfoDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * VC情報の所有者、関係者などの管理者としてクライアントアカウントを紐付けます。
         * @summary VC情報へのクライアントアカウント紐付け
         * @param {UpdateVcInfoDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vcInfosControllerConnectUser(body: UpdateVcInfoDto, id: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling vcInfosControllerConnectUser.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling vcInfosControllerConnectUser.');
            }
            const localVarPath = `/api/v1/vc-infos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UpdateVcInfoDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 新規VCを発行します。
         * @summary 新規VC発行
         * @param {CreateVcInfoDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vcInfosControllerCreate(body: CreateVcInfoDto, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling vcInfosControllerCreate.');
            }
            const localVarPath = `/api/v1/vc-infos`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CreateVcInfoDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * VC情報に紐付いたクライアントアカウントの紐付けを解除します。
         * @summary VC情報のクライアントアカウント紐付け解除
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vcInfosControllerDisconnectUser(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling vcInfosControllerDisconnectUser.');
            }
            const localVarPath = `/api/v1/vc-infos/{id}/user`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * アプリケーションが管理するVC情報を一覧として値を返します。
         * @summary VC情報一覧取得
         * @param {number} [page] (必須) ページネーションを表示する際のページ数に当たるクエリパラメーター。全件取得する際は1を指定。(デフォルト: 1)
         * @param {number} [limit] (必須) ページネーションを表示する際のページ数あたりに表示する件数を指定するクエリパラメーター。全件取得する際は0を指定。(デフォルト: 10)
         * @param {string} [label] (任意) 例: \&quot;vc-for-project1\&quot;
         * @param {string} [description] (任意) 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vcInfosControllerFindAll(page?: number, limit?: number, label?: string, description?: string, options: any = {}): FetchArgs {
            const localVarPath = `/api/v1/vc-infos`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (label !== undefined) {
                localVarQueryParameter['label'] = label;
            }

            if (description !== undefined) {
                localVarQueryParameter['description'] = description;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * リクエストパラメータのidで指定された単一のVC情報の詳細情報の値を返します。
         * @summary VC情報詳細取得
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vcInfosControllerFindOne(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling vcInfosControllerFindOne.');
            }
            const localVarPath = `/api/v1/vc-infos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * リクエストパラメータのidで指定されたVC情報から新規VPを発行します。
         * @summary 新規VP情報生成
         * @param {GenerateVpDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vcInfosControllerGenerateVp(body: GenerateVpDto, id: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling vcInfosControllerGenerateVp.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling vcInfosControllerGenerateVp.');
            }
            const localVarPath = `/api/v1/vc-infos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"GenerateVpDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * VCスキーマを指定せず直接新規VCを発行します。
         * @summary 新規VC発行(スキーマなし)
         * @param {IssueVcInfoDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vcInfosControllerIssue(body: IssueVcInfoDto, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling vcInfosControllerIssue.');
            }
            const localVarPath = `/api/v1/vc-infos/issue`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"IssueVcInfoDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 外部で発行された既存VCをアップロードし、本アプリケーションに保存します。。
         * @summary 新規VCアップロード
         * @param {any} credentialObject 
         * @param {string} label 
         * @param {string} description 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vcInfosControllerUpload(credentialObject: any, label: string, description: string, options: any = {}): FetchArgs {
            // verify required parameter 'credentialObject' is not null or undefined
            if (credentialObject === null || credentialObject === undefined) {
                throw new RequiredError('credentialObject','Required parameter credentialObject was null or undefined when calling vcInfosControllerUpload.');
            }
            // verify required parameter 'label' is not null or undefined
            if (label === null || label === undefined) {
                throw new RequiredError('label','Required parameter label was null or undefined when calling vcInfosControllerUpload.');
            }
            // verify required parameter 'description' is not null or undefined
            if (description === null || description === undefined) {
                throw new RequiredError('description','Required parameter description was null or undefined when calling vcInfosControllerUpload.');
            }
            const localVarPath = `/api/v1/vc-infos/upload`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication bearer required

            if (credentialObject !== undefined) {
                localVarFormParams.set('credentialObject', credentialObject as any);
            }

            if (label !== undefined) {
                localVarFormParams.set('label', label as any);
            }

            if (description !== undefined) {
                localVarFormParams.set('description', description as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VcInfosApi - functional programming interface
 * @export
 */
export const VcInfosApiFp = function(configuration?: Configuration) {
    return {
        /**
         * リクエストパラメータのidで指定された単一のVC情報に対して、任意の管理用ラベルを追加します。
         * @summary VC情報へのラベル追加
         * @param {AddLabelToVcInfoDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vcInfosControllerAddLabel(body: AddLabelToVcInfoDto, id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<VcInfoResponseDto> {
            const localVarFetchArgs = VcInfosApiFetchParamCreator(configuration).vcInfosControllerAddLabel(body, id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * VC情報の所有者、関係者などの管理者としてクライアントアカウントを紐付けます。
         * @summary VC情報へのクライアントアカウント紐付け
         * @param {UpdateVcInfoDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vcInfosControllerConnectUser(body: UpdateVcInfoDto, id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = VcInfosApiFetchParamCreator(configuration).vcInfosControllerConnectUser(body, id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 新規VCを発行します。
         * @summary 新規VC発行
         * @param {CreateVcInfoDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vcInfosControllerCreate(body: CreateVcInfoDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<VcInfoResponseDto> {
            const localVarFetchArgs = VcInfosApiFetchParamCreator(configuration).vcInfosControllerCreate(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * VC情報に紐付いたクライアントアカウントの紐付けを解除します。
         * @summary VC情報のクライアントアカウント紐付け解除
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vcInfosControllerDisconnectUser(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = VcInfosApiFetchParamCreator(configuration).vcInfosControllerDisconnectUser(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * アプリケーションが管理するVC情報を一覧として値を返します。
         * @summary VC情報一覧取得
         * @param {number} [page] (必須) ページネーションを表示する際のページ数に当たるクエリパラメーター。全件取得する際は1を指定。(デフォルト: 1)
         * @param {number} [limit] (必須) ページネーションを表示する際のページ数あたりに表示する件数を指定するクエリパラメーター。全件取得する際は0を指定。(デフォルト: 10)
         * @param {string} [label] (任意) 例: \&quot;vc-for-project1\&quot;
         * @param {string} [description] (任意) 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vcInfosControllerFindAll(page?: number, limit?: number, label?: string, description?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<VcInfosResponseDto> {
            const localVarFetchArgs = VcInfosApiFetchParamCreator(configuration).vcInfosControllerFindAll(page, limit, label, description, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * リクエストパラメータのidで指定された単一のVC情報の詳細情報の値を返します。
         * @summary VC情報詳細取得
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vcInfosControllerFindOne(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<VcInfoResponseDto> {
            const localVarFetchArgs = VcInfosApiFetchParamCreator(configuration).vcInfosControllerFindOne(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * リクエストパラメータのidで指定されたVC情報から新規VPを発行します。
         * @summary 新規VP情報生成
         * @param {GenerateVpDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vcInfosControllerGenerateVp(body: GenerateVpDto, id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<VcInfoResponseDto> {
            const localVarFetchArgs = VcInfosApiFetchParamCreator(configuration).vcInfosControllerGenerateVp(body, id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * VCスキーマを指定せず直接新規VCを発行します。
         * @summary 新規VC発行(スキーマなし)
         * @param {IssueVcInfoDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vcInfosControllerIssue(body: IssueVcInfoDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<VcInfoResponseDto> {
            const localVarFetchArgs = VcInfosApiFetchParamCreator(configuration).vcInfosControllerIssue(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 外部で発行された既存VCをアップロードし、本アプリケーションに保存します。。
         * @summary 新規VCアップロード
         * @param {any} credentialObject 
         * @param {string} label 
         * @param {string} description 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vcInfosControllerUpload(credentialObject: any, label: string, description: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<VcInfoResponseDto> {
            const localVarFetchArgs = VcInfosApiFetchParamCreator(configuration).vcInfosControllerUpload(credentialObject, label, description, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * VcInfosApi - factory interface
 * @export
 */
export const VcInfosApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * リクエストパラメータのidで指定された単一のVC情報に対して、任意の管理用ラベルを追加します。
         * @summary VC情報へのラベル追加
         * @param {AddLabelToVcInfoDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vcInfosControllerAddLabel(body: AddLabelToVcInfoDto, id: string, options?: any) {
            return VcInfosApiFp(configuration).vcInfosControllerAddLabel(body, id, options)(fetch, basePath);
        },
        /**
         * VC情報の所有者、関係者などの管理者としてクライアントアカウントを紐付けます。
         * @summary VC情報へのクライアントアカウント紐付け
         * @param {UpdateVcInfoDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vcInfosControllerConnectUser(body: UpdateVcInfoDto, id: string, options?: any) {
            return VcInfosApiFp(configuration).vcInfosControllerConnectUser(body, id, options)(fetch, basePath);
        },
        /**
         * 新規VCを発行します。
         * @summary 新規VC発行
         * @param {CreateVcInfoDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vcInfosControllerCreate(body: CreateVcInfoDto, options?: any) {
            return VcInfosApiFp(configuration).vcInfosControllerCreate(body, options)(fetch, basePath);
        },
        /**
         * VC情報に紐付いたクライアントアカウントの紐付けを解除します。
         * @summary VC情報のクライアントアカウント紐付け解除
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vcInfosControllerDisconnectUser(id: string, options?: any) {
            return VcInfosApiFp(configuration).vcInfosControllerDisconnectUser(id, options)(fetch, basePath);
        },
        /**
         * アプリケーションが管理するVC情報を一覧として値を返します。
         * @summary VC情報一覧取得
         * @param {number} [page] (必須) ページネーションを表示する際のページ数に当たるクエリパラメーター。全件取得する際は1を指定。(デフォルト: 1)
         * @param {number} [limit] (必須) ページネーションを表示する際のページ数あたりに表示する件数を指定するクエリパラメーター。全件取得する際は0を指定。(デフォルト: 10)
         * @param {string} [label] (任意) 例: \&quot;vc-for-project1\&quot;
         * @param {string} [description] (任意) 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vcInfosControllerFindAll(page?: number, limit?: number, label?: string, description?: string, options?: any) {
            return VcInfosApiFp(configuration).vcInfosControllerFindAll(page, limit, label, description, options)(fetch, basePath);
        },
        /**
         * リクエストパラメータのidで指定された単一のVC情報の詳細情報の値を返します。
         * @summary VC情報詳細取得
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vcInfosControllerFindOne(id: string, options?: any) {
            return VcInfosApiFp(configuration).vcInfosControllerFindOne(id, options)(fetch, basePath);
        },
        /**
         * リクエストパラメータのidで指定されたVC情報から新規VPを発行します。
         * @summary 新規VP情報生成
         * @param {GenerateVpDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vcInfosControllerGenerateVp(body: GenerateVpDto, id: string, options?: any) {
            return VcInfosApiFp(configuration).vcInfosControllerGenerateVp(body, id, options)(fetch, basePath);
        },
        /**
         * VCスキーマを指定せず直接新規VCを発行します。
         * @summary 新規VC発行(スキーマなし)
         * @param {IssueVcInfoDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vcInfosControllerIssue(body: IssueVcInfoDto, options?: any) {
            return VcInfosApiFp(configuration).vcInfosControllerIssue(body, options)(fetch, basePath);
        },
        /**
         * 外部で発行された既存VCをアップロードし、本アプリケーションに保存します。。
         * @summary 新規VCアップロード
         * @param {any} credentialObject 
         * @param {string} label 
         * @param {string} description 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vcInfosControllerUpload(credentialObject: any, label: string, description: string, options?: any) {
            return VcInfosApiFp(configuration).vcInfosControllerUpload(credentialObject, label, description, options)(fetch, basePath);
        },
    };
};

/**
 * VcInfosApi - object-oriented interface
 * @export
 * @class VcInfosApi
 * @extends {BaseAPI}
 */
export class VcInfosApi extends BaseAPI {
    /**
     * リクエストパラメータのidで指定された単一のVC情報に対して、任意の管理用ラベルを追加します。
     * @summary VC情報へのラベル追加
     * @param {AddLabelToVcInfoDto} body 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VcInfosApi
     */
    public vcInfosControllerAddLabel(body: AddLabelToVcInfoDto, id: string, options?: any) {
        return VcInfosApiFp(this.configuration).vcInfosControllerAddLabel(body, id, options)(this.fetch, this.basePath);
    }

    /**
     * VC情報の所有者、関係者などの管理者としてクライアントアカウントを紐付けます。
     * @summary VC情報へのクライアントアカウント紐付け
     * @param {UpdateVcInfoDto} body 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VcInfosApi
     */
    public vcInfosControllerConnectUser(body: UpdateVcInfoDto, id: string, options?: any) {
        return VcInfosApiFp(this.configuration).vcInfosControllerConnectUser(body, id, options)(this.fetch, this.basePath);
    }

    /**
     * 新規VCを発行します。
     * @summary 新規VC発行
     * @param {CreateVcInfoDto} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VcInfosApi
     */
    public vcInfosControllerCreate(body: CreateVcInfoDto, options?: any) {
        return VcInfosApiFp(this.configuration).vcInfosControllerCreate(body, options)(this.fetch, this.basePath);
    }

    /**
     * VC情報に紐付いたクライアントアカウントの紐付けを解除します。
     * @summary VC情報のクライアントアカウント紐付け解除
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VcInfosApi
     */
    public vcInfosControllerDisconnectUser(id: string, options?: any) {
        return VcInfosApiFp(this.configuration).vcInfosControllerDisconnectUser(id, options)(this.fetch, this.basePath);
    }

    /**
     * アプリケーションが管理するVC情報を一覧として値を返します。
     * @summary VC情報一覧取得
     * @param {number} [page] (必須) ページネーションを表示する際のページ数に当たるクエリパラメーター。全件取得する際は1を指定。(デフォルト: 1)
     * @param {number} [limit] (必須) ページネーションを表示する際のページ数あたりに表示する件数を指定するクエリパラメーター。全件取得する際は0を指定。(デフォルト: 10)
     * @param {string} [label] (任意) 例: \&quot;vc-for-project1\&quot;
     * @param {string} [description] (任意) 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VcInfosApi
     */
    public vcInfosControllerFindAll(page?: number, limit?: number, label?: string, description?: string, options?: any) {
        return VcInfosApiFp(this.configuration).vcInfosControllerFindAll(page, limit, label, description, options)(this.fetch, this.basePath);
    }

    /**
     * リクエストパラメータのidで指定された単一のVC情報の詳細情報の値を返します。
     * @summary VC情報詳細取得
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VcInfosApi
     */
    public vcInfosControllerFindOne(id: string, options?: any) {
        return VcInfosApiFp(this.configuration).vcInfosControllerFindOne(id, options)(this.fetch, this.basePath);
    }

    /**
     * リクエストパラメータのidで指定されたVC情報から新規VPを発行します。
     * @summary 新規VP情報生成
     * @param {GenerateVpDto} body 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VcInfosApi
     */
    public vcInfosControllerGenerateVp(body: GenerateVpDto, id: string, options?: any) {
        return VcInfosApiFp(this.configuration).vcInfosControllerGenerateVp(body, id, options)(this.fetch, this.basePath);
    }

    /**
     * VCスキーマを指定せず直接新規VCを発行します。
     * @summary 新規VC発行(スキーマなし)
     * @param {IssueVcInfoDto} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VcInfosApi
     */
    public vcInfosControllerIssue(body: IssueVcInfoDto, options?: any) {
        return VcInfosApiFp(this.configuration).vcInfosControllerIssue(body, options)(this.fetch, this.basePath);
    }

    /**
     * 外部で発行された既存VCをアップロードし、本アプリケーションに保存します。。
     * @summary 新規VCアップロード
     * @param {any} credentialObject 
     * @param {string} label 
     * @param {string} description 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VcInfosApi
     */
    public vcInfosControllerUpload(credentialObject: any, label: string, description: string, options?: any) {
        return VcInfosApiFp(this.configuration).vcInfosControllerUpload(credentialObject, label, description, options)(this.fetch, this.basePath);
    }

}
/**
 * VcSchemasApi - fetch parameter creator
 * @export
 */
export const VcSchemasApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 新規VCスキーマを作成します。
         * @summary 新規VCスキーマ作成
         * @param {CreateVcSchemaDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vcSchemasControllerCreate(body: CreateVcSchemaDto, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling vcSchemasControllerCreate.');
            }
            const localVarPath = `/api/v1/vc-schemas`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CreateVcSchemaDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * VCスキーマを一覧として値を返します。
         * @summary VCスキーマ一覧取得
         * @param {number} [page] (必須) ページネーションを表示する際のページ数に当たるクエリパラメーター。全件取得する際は1を指定。(デフォルト: 1)
         * @param {number} [limit] (必須) ページネーションを表示する際のページ数あたりに表示する件数を指定するクエリパラメーター。全件取得する際は0を指定。(デフォルト: 10)
         * @param {string} [title] (任意) 例: \&quot;Schema Sample\&quot;
         * @param {string} [version] (任意) 例: \&quot;1.0.0\&quot;
         * @param {string} [description] (任意) 例: 
         * @param {boolean} [isBadgeSchema] (任意) 例: true
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vcSchemasControllerFindAll(page?: number, limit?: number, title?: string, version?: string, description?: string, isBadgeSchema?: boolean, options: any = {}): FetchArgs {
            const localVarPath = `/api/v1/vc-schemas`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (title !== undefined) {
                localVarQueryParameter['title'] = title;
            }

            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }

            if (description !== undefined) {
                localVarQueryParameter['description'] = description;
            }

            if (isBadgeSchema !== undefined) {
                localVarQueryParameter['isBadgeSchema'] = isBadgeSchema;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * リクエストパラメータのidで指定された単一のVCスキーマの詳細情報の値を返します。
         * @summary VCスキーマ情報詳細取得
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vcSchemasControllerFindOne(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling vcSchemasControllerFindOne.');
            }
            const localVarPath = `/api/v1/vc-schemas/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * VCスキーマに関連するグループを紐付けます。
         * @summary VCスキーマへのグループ紐付け
         * @param {UpdateVcSchemaDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vcSchemasControllerUpdate(body: UpdateVcSchemaDto, id: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling vcSchemasControllerUpdate.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling vcSchemasControllerUpdate.');
            }
            const localVarPath = `/api/v1/vc-schemas/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UpdateVcSchemaDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VcSchemasApi - functional programming interface
 * @export
 */
export const VcSchemasApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 新規VCスキーマを作成します。
         * @summary 新規VCスキーマ作成
         * @param {CreateVcSchemaDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vcSchemasControllerCreate(body: CreateVcSchemaDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<VcSchemaResponseDto> {
            const localVarFetchArgs = VcSchemasApiFetchParamCreator(configuration).vcSchemasControllerCreate(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * VCスキーマを一覧として値を返します。
         * @summary VCスキーマ一覧取得
         * @param {number} [page] (必須) ページネーションを表示する際のページ数に当たるクエリパラメーター。全件取得する際は1を指定。(デフォルト: 1)
         * @param {number} [limit] (必須) ページネーションを表示する際のページ数あたりに表示する件数を指定するクエリパラメーター。全件取得する際は0を指定。(デフォルト: 10)
         * @param {string} [title] (任意) 例: \&quot;Schema Sample\&quot;
         * @param {string} [version] (任意) 例: \&quot;1.0.0\&quot;
         * @param {string} [description] (任意) 例: 
         * @param {boolean} [isBadgeSchema] (任意) 例: true
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vcSchemasControllerFindAll(page?: number, limit?: number, title?: string, version?: string, description?: string, isBadgeSchema?: boolean, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<VcSchemasResponseDto> {
            const localVarFetchArgs = VcSchemasApiFetchParamCreator(configuration).vcSchemasControllerFindAll(page, limit, title, version, description, isBadgeSchema, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * リクエストパラメータのidで指定された単一のVCスキーマの詳細情報の値を返します。
         * @summary VCスキーマ情報詳細取得
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vcSchemasControllerFindOne(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<VcSchemaResponseDto> {
            const localVarFetchArgs = VcSchemasApiFetchParamCreator(configuration).vcSchemasControllerFindOne(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * VCスキーマに関連するグループを紐付けます。
         * @summary VCスキーマへのグループ紐付け
         * @param {UpdateVcSchemaDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vcSchemasControllerUpdate(body: UpdateVcSchemaDto, id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<VcSchemaResponseDto> {
            const localVarFetchArgs = VcSchemasApiFetchParamCreator(configuration).vcSchemasControllerUpdate(body, id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * VcSchemasApi - factory interface
 * @export
 */
export const VcSchemasApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 新規VCスキーマを作成します。
         * @summary 新規VCスキーマ作成
         * @param {CreateVcSchemaDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vcSchemasControllerCreate(body: CreateVcSchemaDto, options?: any) {
            return VcSchemasApiFp(configuration).vcSchemasControllerCreate(body, options)(fetch, basePath);
        },
        /**
         * VCスキーマを一覧として値を返します。
         * @summary VCスキーマ一覧取得
         * @param {number} [page] (必須) ページネーションを表示する際のページ数に当たるクエリパラメーター。全件取得する際は1を指定。(デフォルト: 1)
         * @param {number} [limit] (必須) ページネーションを表示する際のページ数あたりに表示する件数を指定するクエリパラメーター。全件取得する際は0を指定。(デフォルト: 10)
         * @param {string} [title] (任意) 例: \&quot;Schema Sample\&quot;
         * @param {string} [version] (任意) 例: \&quot;1.0.0\&quot;
         * @param {string} [description] (任意) 例: 
         * @param {boolean} [isBadgeSchema] (任意) 例: true
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vcSchemasControllerFindAll(page?: number, limit?: number, title?: string, version?: string, description?: string, isBadgeSchema?: boolean, options?: any) {
            return VcSchemasApiFp(configuration).vcSchemasControllerFindAll(page, limit, title, version, description, isBadgeSchema, options)(fetch, basePath);
        },
        /**
         * リクエストパラメータのidで指定された単一のVCスキーマの詳細情報の値を返します。
         * @summary VCスキーマ情報詳細取得
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vcSchemasControllerFindOne(id: string, options?: any) {
            return VcSchemasApiFp(configuration).vcSchemasControllerFindOne(id, options)(fetch, basePath);
        },
        /**
         * VCスキーマに関連するグループを紐付けます。
         * @summary VCスキーマへのグループ紐付け
         * @param {UpdateVcSchemaDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vcSchemasControllerUpdate(body: UpdateVcSchemaDto, id: string, options?: any) {
            return VcSchemasApiFp(configuration).vcSchemasControllerUpdate(body, id, options)(fetch, basePath);
        },
    };
};

/**
 * VcSchemasApi - object-oriented interface
 * @export
 * @class VcSchemasApi
 * @extends {BaseAPI}
 */
export class VcSchemasApi extends BaseAPI {
    /**
     * 新規VCスキーマを作成します。
     * @summary 新規VCスキーマ作成
     * @param {CreateVcSchemaDto} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VcSchemasApi
     */
    public vcSchemasControllerCreate(body: CreateVcSchemaDto, options?: any) {
        return VcSchemasApiFp(this.configuration).vcSchemasControllerCreate(body, options)(this.fetch, this.basePath);
    }

    /**
     * VCスキーマを一覧として値を返します。
     * @summary VCスキーマ一覧取得
     * @param {number} [page] (必須) ページネーションを表示する際のページ数に当たるクエリパラメーター。全件取得する際は1を指定。(デフォルト: 1)
     * @param {number} [limit] (必須) ページネーションを表示する際のページ数あたりに表示する件数を指定するクエリパラメーター。全件取得する際は0を指定。(デフォルト: 10)
     * @param {string} [title] (任意) 例: \&quot;Schema Sample\&quot;
     * @param {string} [version] (任意) 例: \&quot;1.0.0\&quot;
     * @param {string} [description] (任意) 例: 
     * @param {boolean} [isBadgeSchema] (任意) 例: true
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VcSchemasApi
     */
    public vcSchemasControllerFindAll(page?: number, limit?: number, title?: string, version?: string, description?: string, isBadgeSchema?: boolean, options?: any) {
        return VcSchemasApiFp(this.configuration).vcSchemasControllerFindAll(page, limit, title, version, description, isBadgeSchema, options)(this.fetch, this.basePath);
    }

    /**
     * リクエストパラメータのidで指定された単一のVCスキーマの詳細情報の値を返します。
     * @summary VCスキーマ情報詳細取得
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VcSchemasApi
     */
    public vcSchemasControllerFindOne(id: string, options?: any) {
        return VcSchemasApiFp(this.configuration).vcSchemasControllerFindOne(id, options)(this.fetch, this.basePath);
    }

    /**
     * VCスキーマに関連するグループを紐付けます。
     * @summary VCスキーマへのグループ紐付け
     * @param {UpdateVcSchemaDto} body 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VcSchemasApi
     */
    public vcSchemasControllerUpdate(body: UpdateVcSchemaDto, id: string, options?: any) {
        return VcSchemasApiFp(this.configuration).vcSchemasControllerUpdate(body, id, options)(this.fetch, this.basePath);
    }

}
/**
 * VerificationsApi - fetch parameter creator
 * @export
 */
export const VerificationsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * VC/VPの検証を実行します。
         * @summary VC/VP検証
         * @param {VerificationDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verificationsControllerCreate(body: VerificationDto, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling verificationsControllerCreate.');
            }
            const localVarPath = `/api/v1/verifications`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"VerificationDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * アプリケーションが管理するVC/VP検証結果を一覧として値を返します。
         * @summary VC/VP検証結果一覧取得
         * @param {number} [page] (必須) ページネーションを表示する際のページ数に当たるクエリパラメーター。全件取得する際は1を指定。(デフォルト: 1)
         * @param {number} [limit] (必須) ページネーションを表示する際のページ数あたりに表示する件数を指定するクエリパラメーター。全件取得する際は0を指定。(デフォルト: 10)
         * @param {string} [label] (任意) 例: \&quot;verification-for-project1\&quot;
         * @param {boolean} [result] (任意) 例: true
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verificationsControllerFindAll(page?: number, limit?: number, label?: string, result?: boolean, options: any = {}): FetchArgs {
            const localVarPath = `/api/v1/verifications`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (label !== undefined) {
                localVarQueryParameter['label'] = label;
            }

            if (result !== undefined) {
                localVarQueryParameter['result'] = result;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * リクエストパラメータのidで指定された単一のVC/VP検証結果の詳細情報の値を返します。
         * @summary VC/VP検証結果詳細取得
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verificationsControllerFindOne(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling verificationsControllerFindOne.');
            }
            const localVarPath = `/api/v1/verifications/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VerificationsApi - functional programming interface
 * @export
 */
export const VerificationsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * VC/VPの検証を実行します。
         * @summary VC/VP検証
         * @param {VerificationDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verificationsControllerCreate(body: VerificationDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<VerificationResponseDto> {
            const localVarFetchArgs = VerificationsApiFetchParamCreator(configuration).verificationsControllerCreate(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * アプリケーションが管理するVC/VP検証結果を一覧として値を返します。
         * @summary VC/VP検証結果一覧取得
         * @param {number} [page] (必須) ページネーションを表示する際のページ数に当たるクエリパラメーター。全件取得する際は1を指定。(デフォルト: 1)
         * @param {number} [limit] (必須) ページネーションを表示する際のページ数あたりに表示する件数を指定するクエリパラメーター。全件取得する際は0を指定。(デフォルト: 10)
         * @param {string} [label] (任意) 例: \&quot;verification-for-project1\&quot;
         * @param {boolean} [result] (任意) 例: true
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verificationsControllerFindAll(page?: number, limit?: number, label?: string, result?: boolean, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<VerificationsResponseDto> {
            const localVarFetchArgs = VerificationsApiFetchParamCreator(configuration).verificationsControllerFindAll(page, limit, label, result, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * リクエストパラメータのidで指定された単一のVC/VP検証結果の詳細情報の値を返します。
         * @summary VC/VP検証結果詳細取得
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verificationsControllerFindOne(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<VerificationResponseDto> {
            const localVarFetchArgs = VerificationsApiFetchParamCreator(configuration).verificationsControllerFindOne(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * VerificationsApi - factory interface
 * @export
 */
export const VerificationsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * VC/VPの検証を実行します。
         * @summary VC/VP検証
         * @param {VerificationDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verificationsControllerCreate(body: VerificationDto, options?: any) {
            return VerificationsApiFp(configuration).verificationsControllerCreate(body, options)(fetch, basePath);
        },
        /**
         * アプリケーションが管理するVC/VP検証結果を一覧として値を返します。
         * @summary VC/VP検証結果一覧取得
         * @param {number} [page] (必須) ページネーションを表示する際のページ数に当たるクエリパラメーター。全件取得する際は1を指定。(デフォルト: 1)
         * @param {number} [limit] (必須) ページネーションを表示する際のページ数あたりに表示する件数を指定するクエリパラメーター。全件取得する際は0を指定。(デフォルト: 10)
         * @param {string} [label] (任意) 例: \&quot;verification-for-project1\&quot;
         * @param {boolean} [result] (任意) 例: true
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verificationsControllerFindAll(page?: number, limit?: number, label?: string, result?: boolean, options?: any) {
            return VerificationsApiFp(configuration).verificationsControllerFindAll(page, limit, label, result, options)(fetch, basePath);
        },
        /**
         * リクエストパラメータのidで指定された単一のVC/VP検証結果の詳細情報の値を返します。
         * @summary VC/VP検証結果詳細取得
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verificationsControllerFindOne(id: string, options?: any) {
            return VerificationsApiFp(configuration).verificationsControllerFindOne(id, options)(fetch, basePath);
        },
    };
};

/**
 * VerificationsApi - object-oriented interface
 * @export
 * @class VerificationsApi
 * @extends {BaseAPI}
 */
export class VerificationsApi extends BaseAPI {
    /**
     * VC/VPの検証を実行します。
     * @summary VC/VP検証
     * @param {VerificationDto} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VerificationsApi
     */
    public verificationsControllerCreate(body: VerificationDto, options?: any) {
        return VerificationsApiFp(this.configuration).verificationsControllerCreate(body, options)(this.fetch, this.basePath);
    }

    /**
     * アプリケーションが管理するVC/VP検証結果を一覧として値を返します。
     * @summary VC/VP検証結果一覧取得
     * @param {number} [page] (必須) ページネーションを表示する際のページ数に当たるクエリパラメーター。全件取得する際は1を指定。(デフォルト: 1)
     * @param {number} [limit] (必須) ページネーションを表示する際のページ数あたりに表示する件数を指定するクエリパラメーター。全件取得する際は0を指定。(デフォルト: 10)
     * @param {string} [label] (任意) 例: \&quot;verification-for-project1\&quot;
     * @param {boolean} [result] (任意) 例: true
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VerificationsApi
     */
    public verificationsControllerFindAll(page?: number, limit?: number, label?: string, result?: boolean, options?: any) {
        return VerificationsApiFp(this.configuration).verificationsControllerFindAll(page, limit, label, result, options)(this.fetch, this.basePath);
    }

    /**
     * リクエストパラメータのidで指定された単一のVC/VP検証結果の詳細情報の値を返します。
     * @summary VC/VP検証結果詳細取得
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VerificationsApi
     */
    public verificationsControllerFindOne(id: string, options?: any) {
        return VerificationsApiFp(this.configuration).verificationsControllerFindOne(id, options)(this.fetch, this.basePath);
    }

}
/**
 * VpInfosApi - fetch parameter creator
 * @export
 */
export const VpInfosApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * リクエストパラメータのidで指定された単一のVP情報に対して、任意の管理用ラベルを追加します。
         * @summary VP情報へのラベル追加
         * @param {AddLabelToVpInfoDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vpInfosControllerAddLabel(body: AddLabelToVpInfoDto, id: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling vpInfosControllerAddLabel.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling vpInfosControllerAddLabel.');
            }
            const localVarPath = `/api/v1/vp-infos/{id}/label`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"AddLabelToVpInfoDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * VP情報の所有者、関係者などの管理者としてクライアントアカウントを紐付けます。
         * @summary VP情報へのクライアントアカウント紐付け
         * @param {UpdateVcInfoDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vpInfosControllerConnectUser(body: UpdateVcInfoDto, id: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling vpInfosControllerConnectUser.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling vpInfosControllerConnectUser.');
            }
            const localVarPath = `/api/v1/vp-infos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UpdateVcInfoDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 新規VPを生成します。
         * @summary 新規VP生成
         * @param {CreateVpInfoDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vpInfosControllerCreate(body: CreateVpInfoDto, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling vpInfosControllerCreate.');
            }
            const localVarPath = `/api/v1/vp-infos`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CreateVpInfoDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * VP情報に紐付いたクライアントアカウントの紐付けを解除します。
         * @summary VP情報のクライアントアカウント紐付け解除
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vpInfosControllerDisconnectUser(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling vpInfosControllerDisconnectUser.');
            }
            const localVarPath = `/api/v1/vp-infos/{id}/user`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * アプリケーションが管理するVP情報を一覧として値を返します。
         * @summary VP情報一覧取得
         * @param {number} [page] (必須) ページネーションを表示する際のページ数に当たるクエリパラメーター。全件取得する際は1を指定。(デフォルト: 1)
         * @param {number} [limit] (必須) ページネーションを表示する際のページ数あたりに表示する件数を指定するクエリパラメーター。全件取得する際は0を指定。(デフォルト: 10)
         * @param {string} [label] (任意) 例: \&quot;vc-for-project1\&quot;
         * @param {string} [description] (任意) 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vpInfosControllerFindAll(page?: number, limit?: number, label?: string, description?: string, options: any = {}): FetchArgs {
            const localVarPath = `/api/v1/vp-infos`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (label !== undefined) {
                localVarQueryParameter['label'] = label;
            }

            if (description !== undefined) {
                localVarQueryParameter['description'] = description;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * リクエストパラメータのidで指定された単一のVP情報の詳細情報の値を返します。
         * @summary VP情報詳細取得
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vpInfosControllerFindOne(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling vpInfosControllerFindOne.');
            }
            const localVarPath = `/api/v1/vp-infos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 外部で発行された既存VPをアップロードし、本アプリケーションに保存します。。
         * @summary 新規VPアップロード
         * @param {any} credentialObject 
         * @param {string} label 
         * @param {string} description 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vpInfosControllerUpload(credentialObject: any, label: string, description: string, options: any = {}): FetchArgs {
            // verify required parameter 'credentialObject' is not null or undefined
            if (credentialObject === null || credentialObject === undefined) {
                throw new RequiredError('credentialObject','Required parameter credentialObject was null or undefined when calling vpInfosControllerUpload.');
            }
            // verify required parameter 'label' is not null or undefined
            if (label === null || label === undefined) {
                throw new RequiredError('label','Required parameter label was null or undefined when calling vpInfosControllerUpload.');
            }
            // verify required parameter 'description' is not null or undefined
            if (description === null || description === undefined) {
                throw new RequiredError('description','Required parameter description was null or undefined when calling vpInfosControllerUpload.');
            }
            const localVarPath = `/api/v1/vp-infos/upload`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication bearer required

            if (credentialObject !== undefined) {
                localVarFormParams.set('credentialObject', credentialObject as any);
            }

            if (label !== undefined) {
                localVarFormParams.set('label', label as any);
            }

            if (description !== undefined) {
                localVarFormParams.set('description', description as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VpInfosApi - functional programming interface
 * @export
 */
export const VpInfosApiFp = function(configuration?: Configuration) {
    return {
        /**
         * リクエストパラメータのidで指定された単一のVP情報に対して、任意の管理用ラベルを追加します。
         * @summary VP情報へのラベル追加
         * @param {AddLabelToVpInfoDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vpInfosControllerAddLabel(body: AddLabelToVpInfoDto, id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<VpInfoResponseDto> {
            const localVarFetchArgs = VpInfosApiFetchParamCreator(configuration).vpInfosControllerAddLabel(body, id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * VP情報の所有者、関係者などの管理者としてクライアントアカウントを紐付けます。
         * @summary VP情報へのクライアントアカウント紐付け
         * @param {UpdateVcInfoDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vpInfosControllerConnectUser(body: UpdateVcInfoDto, id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = VpInfosApiFetchParamCreator(configuration).vpInfosControllerConnectUser(body, id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 新規VPを生成します。
         * @summary 新規VP生成
         * @param {CreateVpInfoDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vpInfosControllerCreate(body: CreateVpInfoDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = VpInfosApiFetchParamCreator(configuration).vpInfosControllerCreate(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * VP情報に紐付いたクライアントアカウントの紐付けを解除します。
         * @summary VP情報のクライアントアカウント紐付け解除
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vpInfosControllerDisconnectUser(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = VpInfosApiFetchParamCreator(configuration).vpInfosControllerDisconnectUser(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * アプリケーションが管理するVP情報を一覧として値を返します。
         * @summary VP情報一覧取得
         * @param {number} [page] (必須) ページネーションを表示する際のページ数に当たるクエリパラメーター。全件取得する際は1を指定。(デフォルト: 1)
         * @param {number} [limit] (必須) ページネーションを表示する際のページ数あたりに表示する件数を指定するクエリパラメーター。全件取得する際は0を指定。(デフォルト: 10)
         * @param {string} [label] (任意) 例: \&quot;vc-for-project1\&quot;
         * @param {string} [description] (任意) 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vpInfosControllerFindAll(page?: number, limit?: number, label?: string, description?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<VpInfoResponseDto> {
            const localVarFetchArgs = VpInfosApiFetchParamCreator(configuration).vpInfosControllerFindAll(page, limit, label, description, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * リクエストパラメータのidで指定された単一のVP情報の詳細情報の値を返します。
         * @summary VP情報詳細取得
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vpInfosControllerFindOne(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<VpInfoDetailDto> {
            const localVarFetchArgs = VpInfosApiFetchParamCreator(configuration).vpInfosControllerFindOne(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 外部で発行された既存VPをアップロードし、本アプリケーションに保存します。。
         * @summary 新規VPアップロード
         * @param {any} credentialObject 
         * @param {string} label 
         * @param {string} description 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vpInfosControllerUpload(credentialObject: any, label: string, description: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<VpInfoResponseDto> {
            const localVarFetchArgs = VpInfosApiFetchParamCreator(configuration).vpInfosControllerUpload(credentialObject, label, description, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * VpInfosApi - factory interface
 * @export
 */
export const VpInfosApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * リクエストパラメータのidで指定された単一のVP情報に対して、任意の管理用ラベルを追加します。
         * @summary VP情報へのラベル追加
         * @param {AddLabelToVpInfoDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vpInfosControllerAddLabel(body: AddLabelToVpInfoDto, id: string, options?: any) {
            return VpInfosApiFp(configuration).vpInfosControllerAddLabel(body, id, options)(fetch, basePath);
        },
        /**
         * VP情報の所有者、関係者などの管理者としてクライアントアカウントを紐付けます。
         * @summary VP情報へのクライアントアカウント紐付け
         * @param {UpdateVcInfoDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vpInfosControllerConnectUser(body: UpdateVcInfoDto, id: string, options?: any) {
            return VpInfosApiFp(configuration).vpInfosControllerConnectUser(body, id, options)(fetch, basePath);
        },
        /**
         * 新規VPを生成します。
         * @summary 新規VP生成
         * @param {CreateVpInfoDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vpInfosControllerCreate(body: CreateVpInfoDto, options?: any) {
            return VpInfosApiFp(configuration).vpInfosControllerCreate(body, options)(fetch, basePath);
        },
        /**
         * VP情報に紐付いたクライアントアカウントの紐付けを解除します。
         * @summary VP情報のクライアントアカウント紐付け解除
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vpInfosControllerDisconnectUser(id: string, options?: any) {
            return VpInfosApiFp(configuration).vpInfosControllerDisconnectUser(id, options)(fetch, basePath);
        },
        /**
         * アプリケーションが管理するVP情報を一覧として値を返します。
         * @summary VP情報一覧取得
         * @param {number} [page] (必須) ページネーションを表示する際のページ数に当たるクエリパラメーター。全件取得する際は1を指定。(デフォルト: 1)
         * @param {number} [limit] (必須) ページネーションを表示する際のページ数あたりに表示する件数を指定するクエリパラメーター。全件取得する際は0を指定。(デフォルト: 10)
         * @param {string} [label] (任意) 例: \&quot;vc-for-project1\&quot;
         * @param {string} [description] (任意) 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vpInfosControllerFindAll(page?: number, limit?: number, label?: string, description?: string, options?: any) {
            return VpInfosApiFp(configuration).vpInfosControllerFindAll(page, limit, label, description, options)(fetch, basePath);
        },
        /**
         * リクエストパラメータのidで指定された単一のVP情報の詳細情報の値を返します。
         * @summary VP情報詳細取得
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vpInfosControllerFindOne(id: string, options?: any) {
            return VpInfosApiFp(configuration).vpInfosControllerFindOne(id, options)(fetch, basePath);
        },
        /**
         * 外部で発行された既存VPをアップロードし、本アプリケーションに保存します。。
         * @summary 新規VPアップロード
         * @param {any} credentialObject 
         * @param {string} label 
         * @param {string} description 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vpInfosControllerUpload(credentialObject: any, label: string, description: string, options?: any) {
            return VpInfosApiFp(configuration).vpInfosControllerUpload(credentialObject, label, description, options)(fetch, basePath);
        },
    };
};

/**
 * VpInfosApi - object-oriented interface
 * @export
 * @class VpInfosApi
 * @extends {BaseAPI}
 */
export class VpInfosApi extends BaseAPI {
    /**
     * リクエストパラメータのidで指定された単一のVP情報に対して、任意の管理用ラベルを追加します。
     * @summary VP情報へのラベル追加
     * @param {AddLabelToVpInfoDto} body 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VpInfosApi
     */
    public vpInfosControllerAddLabel(body: AddLabelToVpInfoDto, id: string, options?: any) {
        return VpInfosApiFp(this.configuration).vpInfosControllerAddLabel(body, id, options)(this.fetch, this.basePath);
    }

    /**
     * VP情報の所有者、関係者などの管理者としてクライアントアカウントを紐付けます。
     * @summary VP情報へのクライアントアカウント紐付け
     * @param {UpdateVcInfoDto} body 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VpInfosApi
     */
    public vpInfosControllerConnectUser(body: UpdateVcInfoDto, id: string, options?: any) {
        return VpInfosApiFp(this.configuration).vpInfosControllerConnectUser(body, id, options)(this.fetch, this.basePath);
    }

    /**
     * 新規VPを生成します。
     * @summary 新規VP生成
     * @param {CreateVpInfoDto} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VpInfosApi
     */
    public vpInfosControllerCreate(body: CreateVpInfoDto, options?: any) {
        return VpInfosApiFp(this.configuration).vpInfosControllerCreate(body, options)(this.fetch, this.basePath);
    }

    /**
     * VP情報に紐付いたクライアントアカウントの紐付けを解除します。
     * @summary VP情報のクライアントアカウント紐付け解除
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VpInfosApi
     */
    public vpInfosControllerDisconnectUser(id: string, options?: any) {
        return VpInfosApiFp(this.configuration).vpInfosControllerDisconnectUser(id, options)(this.fetch, this.basePath);
    }

    /**
     * アプリケーションが管理するVP情報を一覧として値を返します。
     * @summary VP情報一覧取得
     * @param {number} [page] (必須) ページネーションを表示する際のページ数に当たるクエリパラメーター。全件取得する際は1を指定。(デフォルト: 1)
     * @param {number} [limit] (必須) ページネーションを表示する際のページ数あたりに表示する件数を指定するクエリパラメーター。全件取得する際は0を指定。(デフォルト: 10)
     * @param {string} [label] (任意) 例: \&quot;vc-for-project1\&quot;
     * @param {string} [description] (任意) 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VpInfosApi
     */
    public vpInfosControllerFindAll(page?: number, limit?: number, label?: string, description?: string, options?: any) {
        return VpInfosApiFp(this.configuration).vpInfosControllerFindAll(page, limit, label, description, options)(this.fetch, this.basePath);
    }

    /**
     * リクエストパラメータのidで指定された単一のVP情報の詳細情報の値を返します。
     * @summary VP情報詳細取得
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VpInfosApi
     */
    public vpInfosControllerFindOne(id: string, options?: any) {
        return VpInfosApiFp(this.configuration).vpInfosControllerFindOne(id, options)(this.fetch, this.basePath);
    }

    /**
     * 外部で発行された既存VPをアップロードし、本アプリケーションに保存します。。
     * @summary 新規VPアップロード
     * @param {any} credentialObject 
     * @param {string} label 
     * @param {string} description 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VpInfosApi
     */
    public vpInfosControllerUpload(credentialObject: any, label: string, description: string, options?: any) {
        return VpInfosApiFp(this.configuration).vpInfosControllerUpload(credentialObject, label, description, options)(this.fetch, this.basePath);
    }

}
